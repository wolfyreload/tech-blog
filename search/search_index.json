{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Hi I'm Michael and welcome to my blog. I'm a software developer, a gamer, and an aspiring technical writer. I'm going to be writing about dedicated game servers, productivity software, Linux and pretty much anything that I find interesting.</p> <p>Follow me in my transition from Windows to Linux for work and gaming.</p>"},{"location":"blog/2021-01-15-terraria-dedicated-server/","title":"Creating A Dedicated Cloud Server For Terraria In Azure","text":"<p>A guide on how to run your own dedicated Terraria server in Azure.</p>","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#introduction","title":"Introduction","text":"<p>Skill Level Required: Intermediate</p> <p>Firstly, if you have never heard of Terraria before, just do yourself a favour and buy a copy on Steam or GOG. Now, Terraria is a very fun game in single-player mode. But as with most games, it's much more fun to play it with friends.</p> <p>Now you might be asking yourself, why would I want to create my own dedicated server over just inviting my friends over Steam? Here are a few advantages of having a dedicated Terraria Server:</p> <ol> <li>Not everyone plays Terraria on Steam and Steam    players cannot easily play with GOG players.</li> <li>Some people live in apartments with shared wifi and the router is not    accessible for setting up port forwarding etc.</li> <li>Most people use wifi these days and if you host the game with your wifi    network then everyone else will have additional latency.</li> <li>If one person is hosting the game and decides that they have had enough then    no one else can play.</li> <li>If you want to change game hosts you need to manually copy the game world    between people.</li> </ol> <p>Why would you want to set up your own private server over using a dedicated server platform that does all the work for you?</p> <ol> <li>Well, I live in South Africa and I couldn't find a dedicated server platform    for this country and having the game hosted in the States will add too much    latency</li> <li>You looking at $10-$30 per month, regardless of how much you and your friends    are playing. I'd rather have a server that I pay per hour and can turn off    when it's not needed.</li> </ol>","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#getting-started","title":"Getting Started","text":"<p>You going to need the following for this tutorial:</p> <ul> <li>An Azure Account for hosting your dedicated     server.</li> <li>An ssh client, I'm going to be using     Snowflake     but you can use Putty if you     prefer. I just find Snowflake to be easier to use in general.</li> <li>A copy of Terraria on     Steam or     GOG</li> </ul>","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#creating-and-configuring-an-azure-virtual-machine","title":"Creating And Configuring An Azure Virtual Machine","text":"","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#creating-your-first-ubuntu-virtual-machine","title":"Creating Your First Ubuntu Virtual Machine","text":"<p>Now I'm going to assume that you have created an Azure account and you have logged in.</p> <p>The first thing that you going to need to do is to create a Resource Group. Now a Resource Group is just a grouping of your VMs, storage volumes, virtual network interfaces that you have in your Azure account.</p> <p>To create a Resource Group simply click on the Resource Groups button.</p> <p></p> <p>Next click on the Create button</p> <p>Now create a name for the Resource Group. I went for \"Terraria-LAN-RG\" and select a region nearby.</p> <p></p> <p>Select the Review + create button, double-check your choices and if satisfied select the Create button.</p> <p>Now we open our newly created Resource Group</p> <p></p> <p>Next, we want to create a Virtual Machine resource. We click on the Create button and we are going to select ** Ubuntu Server 20.04 LTS**.</p> <p></p> <p>Complete the form and make sure that you choose Standard B2 or any other option with at least 4GB of RAM for the ** Size and Password for Authentication Type**. Make sure you create a nice strong password for the virtual machine. Keep the username and password handy as you are going to need them for the rest of this tutorial.</p> <p></p> <p>Select the Next: Disks button</p> <p>Change the OS disk type to Standard HDD since we don't need fast disk speeds for a Terraria server.</p> <p></p> <p>Select Review + create button, double-check your settings and select the Create button.</p> <p>You'll need to wait 2 minutes or so for Azure to create your virtual machine.</p> <p>Once the deployment is complete, select the Go to resource button</p> <p></p>","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#configuring-your-virtual-machine","title":"Configuring Your Virtual Machine","text":"<p>The first thing we are going to do is give our virtual machine a DNS name by clicking on the Configure link under Networking since IP addresses are much harder to remember</p> <p></p> <p>Change the IP address assignment to Static and give the server any DNS name that you like, I called mine ** terraria-lan. Now click on the Save** button.</p> <p></p> <p>Go back to the Overview screen of your Virtual Machine. Take note of your Public IP address and DNS name as you'll need these later.</p> <p></p> <p>Next, we need to go to Networking and open port 7777 (Terraria's default port)</p> <p></p> <p>Select Add inbound port add button.</p> <p>Set the Destination port ranges to 7777 followed by the Add button.</p> <p></p> <p>The last thing that you might want to change is the Auto-Shutdown under Operations in the side menu. Having the Auto Shutdown will save you money but make sure you select a time that you are unlikely to be mid-game.</p> <p></p>","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#running-your-server","title":"Running Your Server","text":"<p>Now that your Virtual Machine is up and running.</p> <p>We need to do the following:</p> <ul> <li>Getting the server files from the Terraria website</li> <li>Transfer the server files to your new virtual machine</li> <li>Starting up the server</li> </ul>","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#getting-the-server-files","title":"Getting The Server Files","text":"<p>Download the latest version of Terraria Server, at the time of writing it was a version 1.4.3.2 and extract it to somewhere convenient on your computer. I went with c:\\temp\\terraria-server-1432</p> <p>Open the subfolder 1432\\Linux and it should look something like the screenshot below.</p> <p></p>","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#transfering-the-server-files-to-your-virtual-machine","title":"Transfering The Server Files To Your Virtual Machine","text":"<p>Fire up Snowflake. Add a New Connection. Create a New Site.</p> <ul> <li>Name - Any name you want to call it. I called my site     Terraria-Server.</li> <li>Host - the DNS name that you captured earlier</li> <li>User - the username you created for your VM</li> <li>Password - the password you created for your VM</li> <li>Terraria Server files</li> </ul> <p></p> <p>Click on the Connect button.</p> <p>You'll get a notification that looks something like this. Click on Yes</p> <p></p> <p>In the Files section in SnowFlake. Change your path to the location where you extracted your Terraria Server files.</p> <p></p> <p>Just drag and drop your files from your Windows machine (on the right) to your Azure Ubuntu Server on the left. Select Yes. Then select OK. This might take a minute or two to complete.</p>","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#setting-up-your-server","title":"Setting Up Your Server","text":"<p>Next, go to the Terminal tab in SnowFlake.</p> <p></p> <p>Now you can run any Linux command line commands here on your Ubuntu Virtual Machine. The first one we going to use is the ls command see confirm that we copied over all the files correctly.</p> <pre><code>ls\n## Expected output\n## FNA.dll  FNA.dll.config  Terraria-min.png  TerrariaServer  TerrariaServer.bin.x86_64...</code></pre> <p>If we can see all the files, we need to make the TerrariaServer.bin.x86_64 file executable. We do this with the ** chmod** command below</p> <pre><code>chmod +x TerrariaServer.bin.x86_64</code></pre> <p>Now we can start our server by running TerrariaServer.bin.x86_64. Note the \"./\" prefix make sure you include that.</p> <pre><code>./TerrariaServer.bin.x86_64</code></pre> <p>Follow the prompts for creating your server</p> <p></p> <p>Follow the prompts and if you see the following:</p> <p></p> <p>Note: In future, you'll just need to run the command below to run your server.</p> <pre><code>./TerrariaServer.bin.x86_64</code></pre>","tags":["Azure"]},{"location":"blog/2021-01-15-terraria-dedicated-server/#connecting-to-your-new-server","title":"Connecting To Your New Server","text":"<p>Now we start up Terraria. Select Multiplayer followed by Join via IP.</p> <p>Select/Create your Character. Note that Classic characters can only play in Classic worlds, same for Journeyman characters.</p> <p></p> <p>Keep the default Port</p> <p>Fill in the Server password</p> <p>Keep an eye on the server terminal window for any errors and to see who cannot join and why.</p> <p></p> <p>If all goes well you'll be in the game and your friends can join.</p> <p></p> <p>Have fun!!!</p>","tags":["Azure"]},{"location":"blog/2021-01-27-manictime/","title":"Taming Your Timesheet With ManicTime","text":"<p>A guide on how to save time in capturing timesheets with the assistance of ManicTime</p>","tags":["Performance"]},{"location":"blog/2021-01-27-manictime/#introduction","title":"Introduction","text":"<p>Skill level required: Beginner</p> <p>Consider these questions:</p> <ul> <li>Did I start start my day at 7:30 AM or 7:45 AM?</li> <li>Did I spend 15 minutes or 45 minutes looking at a support ticket?</li> <li>How long was I out for my lunch break?</li> <li>Am I working too many hours or too few hours?</li> <li>When I forget to complete my timesheet every day, how do I figure out what I     did?</li> </ul> <p>If you answered yes to any of the above questions, and you work on a computer most of the day, then ManicTime is there to answer all of the above questions.</p>","tags":["Performance"]},{"location":"blog/2021-01-27-manictime/#manictime-basics","title":"ManicTime Basics","text":"<p>In a nutshell, all that ManicTime does is track the duration and time that each window is focused for. So if you answer a call in Teams, reply to emails or get some development work done you can figure out everything that happened after it's happened and you no longer have to guess.</p> <p></p> <p>Let us break the UI down into its pieces:</p> <ul> <li>The first row is custom Tags and comments for each task that you've     performed for the day. More on this later.</li> <li>The next row is Computer Usage which measures Active (working on the     computer) vs Inactive time (e.g. when your computer is locked or you     step away for 10 minutes or more).</li> <li>The Applications tab shows the focused window throughout the whole day</li> <li>The Documents tab shows the name of the currently opened browser window     or the current file open in a program like Visual Studio or VSCode.</li> </ul> <p>If you click on any tab, the reporting information changes to that tab. e.g. if I select the Applications tab I can now see how long each window was focused for.</p> <p></p> <p>Now where the superpowers come in with this tool is one can filter on the results to get an idea of when they started and ended a task. e.g. I'm going to filter on \"manictime.md\" I can see when I started writing this blog post</p> <p></p> <p>Then I can just highlight and tag the time. First, we type in the project we want to assign the time to, in this case, \" Blog\" and add a note of what you were doing.</p> <p></p> <p>You can also easily drag and drop the start and end times for each tag.</p> <p>Finally, I can can then use the details in the captured tags for completing my timesheet for the day.</p>","tags":["Performance"]},{"location":"blog/2021-01-27-manictime/#manictime-professional-edition","title":"ManicTime Professional Edition","text":"<p>These are are the core features of ManicTime and all included in the free version. I haven't needed the professional version of the tool but it does have some enticing features such as:</p> <ul> <li>Periodic screenshots (every 60 seconds by default) which help you guess what     you were busy with at that time.</li> <li>A reminder to capture what you did in the past x number of minutes.</li> <li>Automatic time tagging using custom rules.</li> <li>A whole client/server system for working with a team.</li> </ul>","tags":["Performance"]},{"location":"blog/2021-01-27-manictime/#conclusion","title":"Conclusion","text":"<p>Even the free edition of ManicTime is very useful. You know exactly when you started; how long your lunch break was etc... answering all of the questions we started with. When you get to the end of the day, you know exactly what you did, and timesheets become a breeze.</p> <p>What are you waiting for? Give ManicTime a try.</p>","tags":["Performance"]},{"location":"blog/2022-11-23-windows-to-linux/","title":"Ditching Windows and Switching to Linux","text":"<p>This is the start of a blog series about my journey from being a dedicated Windows fan to a Linux user, specifically Pop!_OS. Here I'll be sharing the hurdles and complications I encountered and my solutions to those complications. I am now using Linux for my gaming machine and my work laptop. I hope that reading about my journey will help smoothen your journey into the world of Linux!</p>","tags":["Linux","Pos_OS"]},{"location":"blog/2022-11-23-windows-to-linux/#introduction","title":"Introduction","text":"<p>Skill level required: Intermediate</p> <p>Before you even consider Linux as a solution to your computing needs you need to ask yourself why. Why would you like to switch over to Linux?</p> <p>Here are some excellent reasons to try Linux:</p> <ul> <li>You want to learn something new</li> <li>You enjoy tinkering</li> <li>You cannot afford a new computer and your current machine is getting slower     every day.</li> <li>Your computer is getting quite old and your current Windows installation is     no longer supported</li> <li>You don't like the new built-in telemetry ads in Windows</li> <li>You cannot upgrade to Windows 11</li> </ul> <p>Reasons not to switch to Linux:</p> <ul> <li>You are not technical (Installing and setting up Linux is not for computer     novices). Also, you WILL encounter issues that will require googling and     figuring out.</li> <li>You have specific software that you HAVE to use and this software isn't     available for Linux. e.g. Photoshop, Microsoft Office, Adobe Premiere,     etc...</li> <li>You expect everything to be free on Linux. You'll be surprised just how much     commercial software is available on Linux. There is some excellent free     software available out there but sometimes the retail options are     significantly better.</li> </ul>","tags":["Linux","Pos_OS"]},{"location":"blog/2022-11-23-windows-to-linux/#trying-out-linux","title":"Trying Out Linux","text":"<p>Before you decide to install Linux remember that you can try Linux first as most Linux distributions have what is known as a Live Distro or Live CD. So you can test if Linux works on your hardware and see what software works for you before taking the plunge and installing it.</p> <p>When it comes to trying out and installing other operating systems. I would recommend that you use the tool called Ventoy. Ventoy allows you to boot an operating system by just copying the ISO file of the operating system onto a bootable flash drive. It even works for Windows 10 and 11.</p> <p>Next, have a look at Distrowatch and a look to see which of the top 5 distros you like the most. I selected POP!_OS because I had heard about it quite a bit of YouTube, and it seemed to be beginner-friendly. Linux Mint is another good option but for the rest of my guide I'll be assuming that you are using POP!_OS.</p> <p>Install Ventoy and download the ISOs of the Linux distros that you would like to try. Then simply reboot your computer, enter into your boot menu and boot Linux to try it.</p> <p>The main things you want to see are the following:</p> <ul> <li>Do you like the look and feel of the system?</li> <li>Does all your hardware work: i.e. test your ethernet and Wi-Fi connectivity,     test that your sound works.</li> <li>Confirm that the software that you want to use on the system is available on     your selected distro</li> </ul>","tags":["Linux","Pos_OS"]},{"location":"blog/2022-11-23-windows-to-linux/#cross-platform-software","title":"Cross-Platform Software","text":"<p>I would recommend that you switch over to using cross-platform software whenever possible as this will make your transition over to Linux much simpler. So for example instead of using Microsoft Office, either make sure that you're using the web version of the office suite or make sure that you are using Libre-office</p> <p>Forcing yourself to use the software that you are going to use in your future Linux system will make the transition much more seamless.</p> <p>Here are some Windows/Mac-only tools with some cross-platform suggestions to use instead:</p> <ul> <li>Microsoft Office - Web version of the Microsoft Office Suite, Google     Suite or Libre-Office</li> <li>Paint.NET - Pinta (note that I'm not going to recommend GIMP as it is     very complicated to use)</li> <li>Adobe Premiere - DaVinci Resolve</li> <li>Visual Studio - VsCode or JetBrains Tool Suite</li> <li>Microsoft Teams - Web version of Microsoft Teams</li> <li>Outlook - Web version of Outlook</li> <li>SQL Server Management Studio - Azure Data Studio and JetBrains DataGrip</li> <li>Ableton Live - Bitwig or Ardour</li> </ul> <p>If there is software that you cannot find an appropriate cross-platform alternative. Then I'm afraid Linux is probably not for you. But before you give up though, have a look at Codeweavers Crossover. This tool is a compatibility layer for running Windows-specific software on Linux (or Mac). Alternatively, you could go with the free option of Wine to run your Windows-specific tools on Linux. Personally, I've had very limited success with this route.</p>","tags":["Linux","Pos_OS"]},{"location":"blog/2022-11-23-windows-to-linux/#what-is-next","title":"What Is Next","text":"<p>The first thing I did in Linux was something unusual. I switched to Pop!_OS on my gaming PC. Just a few years ago gaming on Linux was really difficult to do, but this is no longer the case. We'll be looking at installing Steam and gaming on Pop!_OS next.</p>","tags":["Linux","Pos_OS"]},{"location":"blog/2022-12-03-gaming-steam/","title":"Gaming on Pop_OS! with Steam","text":"<p>If you love PC gaming, I'm going to guess that you game using Steam for your gaming fix. Fortunately, Steam runs really well on Linux. With a few tricks you should be able to play almost all your games in your Steam library.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-03-gaming-steam/#introduction","title":"Introduction","text":"<p>Skill level required: Intermediate</p> <p>Here I'm going to assume that you've installed POP!_OS. If you haven't followed the guide for installing POP!_OS on their website https://support.system76.com/articles/install-pop.</p> <p>The only things I would change in the guide is:</p> <ul> <li>Using Ventoy for the boot media     rather than Etcher. Mostly, because I use Ventoy for trying out multiple     distros from a single flash drive, so it's already available as an     installation media.</li> <li>If you're creating a gaming pc/laptop you might not want your hard drive     encrypted as this will slow down your game loading times a little. So when     you get to the Drive Encryption section in the installer select the     Don't Encrypt option.</li> </ul> <p>Once you have POP!_OS installed, we'll have a look at installing Steam and getting your game library running.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-03-gaming-steam/#installing-steam","title":"Installing Steam","text":"<p>Now that you have a freshly installed machine, don't install Steam using the Pop!_Shop as this will install the Steam flatpak which didn't let me easily store my games on another disk. Visit Steam's website https://store.steampowered.com and click on the Install Steam button. You should get a steam_latest.deb file in your Downloads folder. You can think of a .deb file as a .exe or .msi installer file for Pop!_OS (any distro derived from Debian actually). Double-click on the steam_latest.deb file, and it will open in Eddy (the Pop!_OS .deb installer tool). Simply click on the Install button, and it will start the installation for Steam.</p> <p></p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-03-gaming-steam/#enabling-steam-play","title":"Enabling Steam Play","text":"<p>Now that I had Steam installed, you can just launch Steam using the application launcher (by pressing the Windows Key).</p> <p></p> <p>On my first launch of Steam, I was disappointed to see that my game library had shrunk down to around \u00bc of titles that were available on Windows. After some googling I discovered that you need to enable something called \"Steam Play\" for your games to run on Linux. Fortunately, this was a simple thing to fix.</p> <p>Open Steam &gt;&gt; Settings &gt;&gt; Steam Play</p> <p>Now, you want to tick two options Enable Steam Play for supported titles and Enable Steam Play for all other titles</p> <p></p> <p>Once you click on OK, you'll be prompted to restart Steam.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-03-gaming-steam/#installing-proton-glorious-eggroll","title":"Installing Proton Glorious Eggroll","text":"<p>Now, I could see my entire game library in Steam on Linux. Like, many other people, the first thing I did was launch Skyrim and I soon discovered that I had no sound in the game and had some other weird glitches.</p> <p>There is one more piece of the puzzle that you need to be able to play 99% of your library and that is Proton Glorious Eggroll (Proton GE for short). This tool is a heavily tweaked version of Proton which Steam uses for Steam Play. To download it, navigate to https://github.com/GloriousEggroll/proton-ge-custom</p> <p>Grab the latest release of Proton GE</p> <p></p> <p>Download the latest binaries (not the source code)</p> <p></p> <p>Double-click on the GE-Proton7-41.tar.gz file in your Downloads folder. Click on the Extract button in the top left.</p> <p>Select your Home folder</p> <p></p> <p>Now what no one tells you is that you need to press Ctrl+H to show hidden folders (any folder or file with a dot in-front of the name is a hidden folder). Then select .steam &gt;&gt; steam. Now create a new folder called compatibilitytools.d. You can add additional folders by \"Create Folder\" icon just below the Extract button.</p> <p>Your screen should look as follows when you are ready to extract Proton GE by clicking on the Extract button.</p> <p></p> <p>If you open your file manager and navigate to your new GE-Proton7-41 folder and your screen looks as follows, you are on the right track</p> <p></p> <p>Next, restart Steam and open the properties of any game. Select the Compatibility tab. Tick the Force the use of a specific Steam Play compatibility tool. Then select GE-Proton7-41. Launch your game and if you are lucky, 99% of the time the game will launch and play without issues.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-03-gaming-steam/#tips","title":"Tips","text":"<ul> <li>If you are using a gaming laptop, most gaming laptops have hybrid graphics.     For the best gaming experience you going to want to select the dedicated     graphics card option in your power settings.     </li> <li>If you are struggling to get a game to work, have a look at ProtonDB     https://www.protondb.com and see if other's have managed to play the game     on Linux and what tweaks were needed to play the game.</li> </ul>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-03-gaming-steam/#qa","title":"Q/A","text":"<ul> <li>Why didn't you just use the flatpak for Steam in the Pop!_Shop? Working     with Steam games that you want to have installed on another drive is much     harder and requires creating linked folders etc.</li> <li>Why are my games not working when I'm sharing a common game library with     Windows on another drive? Steam Play does not work correctly with ntfs     formatted drives.</li> <li>My game is immediately crashing on launch? Same as above, have a look at     ProtonDB and see what others needed to do to get the game working.</li> <li>Do you know that you could have completed your whole guide by using 4 lines     of bash script? Yes, I am aware of this but this post is intended to teach     rather than just get to the end goal.</li> <li>Why are you calling the OS Linux don't you know that Linux is just a kernel,     and it's actually GNU/Linux? I am aware of that.</li> </ul>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/","title":"2022 12 10 popos vs vpn","text":"<p>Being able to securely connect to an office or client network is something a typical software developer or server administrator has to do daily. VPNs are usually rather complicated and seem to be more complicated on Linux than Windows. However, that might just be because I have used Windows for a longer time. In this guide, we'll be looking at working with VPNs and some annoying challenges along the way.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/#introduction","title":"Introduction","text":"<p>Skill level required: Advanced</p> <p>Working with VPNs on Pop!_OS and Linux, in general, has been my greatest challenge so far for adopting the Operating System for daily use. Getting VPNs working took a lot of reading and tinkering. Hopefully, this guide will help you get your VPN needs set up and running much quicker.</p> <p>That being said, if you are not comfortable using the Terminal in Windows, I would recommend that you give this guide a skip.</p> <p>We'll start off by installing an open-source VPN software called OpenConnect.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/#installing-openconnect","title":"Installing OpenConnect","text":"<p>On Windows, you often need to install multiple VPN software. However, on Linux, there is one that works particularly well for several VPNs. Introducing OpenConnect.</p> <p>OpenConnect understands the following VPN protocols and can connect to any of the below VPNs:</p> <ul> <li>Cisco AnyConnect SSL VPN</li> <li>Juniper Network Connect</li> <li>Palo Alto Networks (PAN) GlobalProtect SSL VPN</li> <li>Pulse Connect Secure SSL VPN</li> <li>F5 BIG-IP SSL VPN</li> <li>FortiGate SSL VPN</li> <li>Array Networks SSL VPN</li> </ul> <p>This works perfectly for me as I typically use FortiGate and Cisco AnyConnect for 90% of the VPNs, I connect to.</p> <p>To install it, just open the Terminal using the launcher or by pressing WINDOWS_KEY+T</p> <p></p> <pre><code>sudo apt update\nsudo apt install -y openconnect</code></pre> <p>The sudo command tells the terminal to run the rest of the command that follows as a full Administrator. APT stands for Advanced Package Tool and is often the simplest way of installing software on Debian-based distros like Pop!_OS.</p> <p>Note that when you are prompted to fill in your password for your user, there is no indication that you are typing anything (i.e. there are no *s shown as you type your password). Once you enter the right password just press the Enter as usual and APT will install the software for you.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/#using-openconnect","title":"Using OpenConnect","text":"<p>If you wanted to connect to say a FortiGate vpn you will run a terminal command that looks something like this (remember to replace your-vpn-username and remote.officedomain.com with your information):</p> <pre><code>sudo openconnect \\\n    --user=your-vpn-username \\\n    --protocol=fortinet \\\n    --server=remote.officedomain.com:10443</code></pre> <p>When you try and connect you'll typically get an error that looks as follows: \"Certificate from VPN server \"x\" failed verification.\" This is because 99% of VPN solutions seem to use self-signed certificates.</p> <p></p> <p>Fortunately, you can just copy the line indicated below and add that to the terminal command that you are using. E.g. the command that you would use for connecting to the vpn would look something like this in the end.</p> <pre><code>sudo openconnect \\\n    --user=your-vpn-username \\\n    --protocol=fortinet \\\n    --server=remote.officedomain.com:10443 \\\n    --servercert pin-sha256:a+b/c+dg=</code></pre> <p>Next, you'll be prompted for your password and then potentially for your MFA token (if that is enabled).</p> <p>If all goes well, you are now connected to your work VPN. And you are done? Well not quite, you see VPN software does not seem to play nicely with systemd-resolved.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/#domain-name-resolution-not-working-for-vpn-connections","title":"Domain Name Resolution not working for VPN connections","text":"<p>Soon after connecting to the VPN, I discovered that I could not use the DNS name for any servers on my work network, however, the IP address would resolve. E.g. if I have a DNS name test.officedomain.local with IP address 192.168.3.200</p> <p>If I ping test.officedomain.local (while on the VPN) I get Temporary failure in name resolution</p> <pre><code>ping test.officedomain.local\n# ping: test.officedomain.local: Temporary failure in name resolution</code></pre> <p>However, I can ping the IP address, I can connect just perfectly. e.g.</p> <pre><code>ping 192.168.3.200\n# 64 bytes from 192.168.3.200: icmp_seq=1 ttl=118 time=7.65 ms\n# 64 bytes from 192.168.3.200: icmp_seq=2 ttl=118 time=5.13 ms</code></pre>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/#culprit-systemd-resolved","title":"Culprit systemd-resolved","text":"<p>It looks like the VPN software does not play nicely with systemd-resolved. This service is a name resolution manager, that runs on many Linux distributions. It acts as a service for applications and resolves DNS queries. From what I have read, many Linux system admins are not that fond of it in the slightest.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/#turning-off-systemd-resolved","title":"Turning off systemd-resolved","text":"<p>WARNING!!! you can break your networking in your system if you get any of these steps wrong.</p> <p>My resolution was to turn it off and switch back to using plain Network Manager (the the old way of networking in Linux).</p> <p>First, we are going to edit the /etc/NetworkManager/NetworkManager.conf file and enable dns resolution for the old network manager.</p> <pre><code>sudo gedit /etc/NetworkManager/NetworkManager.conf</code></pre> <p>Then put the following line in the [main] section</p> <pre><code>dns=default</code></pre> <p>Your file should look as follows, once you are happy with the file changes Save and close the file.</p> <p></p> <p>Now let us turn off the systemd-resolved service, fix the bad symbolic link for /etc/resolv.conf and restart the network manager.</p> <pre><code>sudo systemctl disable systemd-resolved\nsudo systemctl stop systemd-resolved\nsudo systemctl restart NetworkManager</code></pre> <p>Now we need to reconfigure the old resolveconf package.</p> <pre><code>sudo rm /etc/resolv.conf\nsudo dpkg-reconfigure resolvconf</code></pre> <p>On this screen press TAB to highlight the OK button and press ENTER.</p> <p></p> <p>Now you'll get this screen, just hit ENTER again.</p> <p></p> <p>On this screen press TAB to highlight the OK button and press ENTER.</p> <p>Reboot your machine.</p> <p>Now when you connect to your VPN you should be able to use the domain name rather than the IP address because when your VPN software writes its entries into the /etc/resolv.conf file.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/#rdp-with-remmina","title":"RDP with Remmina","text":"<p>Remmina is your Linux alternative to Windows Remote Desktop.</p> <p>To install Remmina, you are just going to use the following Terminal command.</p> <pre><code>sudo apt update\nsudo apt install -y remmina</code></pre> <p>Now open Remmina from your application launcher.</p> <p></p> <p>Fill in the name of the server you want to RDP and press Enter.</p> <p></p> <p>Note that Remmina can also support the VNC and SSH protocols.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/#conclusion","title":"Conclusion","text":"<p>As you may have noticed working with VPNs in Pop!_OS is rather challenging. Fortunately, you can use one VPN application for connecting to virtually any VPN protocol.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-10-popos-vs-vpn/#what-is-next","title":"What is Next","text":"<p>Now that we have VPNs and RDP working. The next issue I encountered was trying to copy files over my RDP sessions. I didn't come right with this, but found a work-around using the samba protocol. We'll be looking at this next.</p>","tags":["Linux","Pos_OS","Gaming"]},{"location":"blog/2022-12-21-samba/","title":"2022 12 21 samba","text":"<p>In my last blog post I managed to get VPNs and RDP working in Pop!_OS (see The Battle Between Pop!_OS &amp; VPN Software if you missed it). Now my next challenge was to actually copy files over from my local machine over to a remote machine.</p>","tags":["Linux","Pos_OS"]},{"location":"blog/2022-12-21-samba/#introduction","title":"Introduction","text":"<p>Required skill level: Beginner</p> <p>If I needed to copy files to a remote server, I would normally use one of the following methods:</p> <ol> <li>Open the server in the Remote Desktop Connection tool and simply copy the    files.</li> <li>Enable Local Resources in the Remote Desktop Connection tool and copy    the files from my machine from the remote machine.</li> <li>Use the file sharing functionality built into Windows Explorer i.e. type    \\\\remote-computer-name.domain\\c$ in the address bar</li> </ol> <p>At the moment, I have only managed to get method 3 to work in Pop!_OS. Here we will use the SMB protocol.</p>","tags":["Linux","Pos_OS"]},{"location":"blog/2022-12-21-samba/#the-solution-samba","title":"The Solution: Samba","text":"<p>Samba is a free and open-source software suite that provides file and print services for computers on a network. Samba uses the Server Message Block (SMB) protocol, which is a networking protocol used by Windows-based computers to share resources such as files and printers.</p> <p>Samba is primarily used in environments where there are both Windows and Linux/Unix computers, allowing the computers to seamlessly share resources and communicate with each other. It is often used in small and medium-sized business networks and home networks where there are both Windows and Linux/Unix computers.</p>","tags":["Linux","Pos_OS"]},{"location":"blog/2022-12-21-samba/#how-to-use-samba","title":"How to use Samba","text":"<p>Open Files (the file manager for Pop!_OS). Click on the + Other Locations button and then type the following in the Enter server address... field: smb://remote-computer-name.domain/c$</p> <p></p> <p>Note: You will need to change the placeholder above to the actual server that you are connecting to. You may notice that all we've done is replace the forward slashes with backslashes and add smb as a prefix but that's all there is to it.</p> <p>Once you click on Connect you'll be asked to enter your Windows credentials</p> <p></p> <p>Now you can create and copy files to and from your remote server as if you were working with your local file system.</p>","tags":["Linux","Pos_OS"]},{"location":"blog/2022-12-21-samba/#conclusion","title":"Conclusion","text":"<p>Copying files from and to a remote server is easy using the using the SMB protocol.</p> <p>However, I would much prefer to be able to insert the files directly via an RDP session, but that will only be possible if I can find out how to do it.</p>","tags":["Linux","Pos_OS"]},{"location":"blog/2023-02-17-docker/","title":"2023 02 17 docker","text":"<p>I've been using Docker for about 4+ years now, and it really simplifies software development and deployment. Docker works well on Windows 10 under WSL 2.0. However, once you've run Docker natively on a Linux machine, you'll notice a huge difference in performance, memory and space usage, and there's really no comparison between running Docker natively and 'emulating' Docker in a WSL Linux kernel via Hyper V.</p> <p>As with all my guides, I'll be using Pop!_OS as my Linux distro of choice.</p>","tags":["Linux","Pos_OS","Docker"]},{"location":"blog/2023-02-17-docker/#introduction","title":"Introduction","text":"<p>Required skill level: Intermediate</p> <p>I use Docker every day, and these are the things I use Docker for:</p> <ul> <li>Create Docker images to deploy software that runs on virtual machines</li> <li>Running relational databases in containers</li> <li>Building .Net and Angular software applications using Docker BuildKit</li> <li>Running VPN software in Docker to simplify the installation and use of VPN     software</li> </ul> <p>In this guide we'll be learning about how to install Docker on Pop!_OS and how to run multiple relational database containers using Docker.</p>","tags":["Linux","Pos_OS","Docker"]},{"location":"blog/2023-02-17-docker/#installing-docker","title":"Installing Docker","text":"<p>Here I'll give you the scripts I use to install Docker, but I'll also go through what the scripts actually install. It can be dangerous to just copy and paste scripts, so I'll try to explain what the scripts actually do as we go along.</p> <p>There are a number of dependencies for adding the Docker apt sources:</p> <ul> <li>ca-certificates - contains a number of common certificates used for     SSL/TLS encryption.</li> <li>curl - a command line tool for interacting with web servers, often used     to download files.</li> <li>gnupg - GNU Privacy Guard is a tool for secure communication and     storage. It's used to encrypt and sign messages.</li> <li>lsb-release - Provides information about the version and distribution of     the Linux distribution you are currently using.</li> </ul> <pre><code># Get dependencies to install docker\nsudo apt-get update\nsudo apt-get -y install ca-certificates curl gnupg lsb-release</code></pre> <p>Now we should have all the dependencies that we need to add the Docker apt sources to our apt sources, which allows us to get the latest Docker packages from Docker itself, rather than getting the images from the Pop!_OS or Ubuntu maintainers.</p> <pre><code># Add docker ppa reference\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\nsudo echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" \\\n    | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null</code></pre> <p>Next, we'll actually install Docker and its associated packages:</p> <ul> <li>docker-ce - Package for the Docker Community Edition.</li> <li>docker-ce-cli - Package for the Docker Command Line Interface, a tool     for managing Docker containers and images from the command line.</li> <li>docker-compose - A tool for defining and running multi-container Docker     applications.</li> </ul> <pre><code># Install docker\nsudo apt-get update\nsudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose</code></pre> <p>Once Docker is installed, I don't like using sudo for every Docker command on my local machine. If I add my current user to the docker group, I won't need to use sudo when using Docker.</p> <p>This step is optional. If you don't perform this step, you will need to add the sudo command before each Docker command in the future. Note that you will need to reboot your machine after running the script below for the change to take effect.</p> <pre><code># Make a docker group and add the current user to the group\nsudo groupadd docker\nsudo usermod -aG docker ${USER}</code></pre> <p>Now, to test that Docker is successfully installed, run the following, and you should get the expected output if Docker is installed correctly.</p> <pre><code>docker ps\n# Expected output\n# CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</code></pre>","tags":["Linux","Pos_OS","Docker"]},{"location":"blog/2023-02-17-docker/#using-docker-to-install-relational-databases","title":"Using Docker to install relational databases","text":"<p>I typically use Docker to run relational databases because I use multiple database software. By using Docker, I can have a different 'server' for each project I'm working on and only have that server available when and if I need it, rather than having it running in the background all the time.</p> <p>Here is the script I use to spin up a MS SQL Server, PostgreSQL and MySQL server databases. For each server we use its default port and password \"SuperWeakPassword123!\"</p> <pre><code># Spin up MS SQL Server 2019 Developer edition\ndocker run -d \\\n  -e \"ACCEPT_EULA=Y\" \\\n  -e \"MSSQL_SA_PASSWORD=SuperWeakPassword123!\" \\\n  -p 1433:1433 \\\n  --name sql-server-2019-playground \\\n  mcr.microsoft.com/mssql/server:2019-CU18-ubuntu-20.04\n# Spin up MySQL Server 8\ndocker run -d \\\n  -e \"MYSQL_ROOT_PASSWORD=SuperWeakPassword123!\" \\\n  -p3306:3306 \\\n  --name mysql-8-playground \\\n  mysql:8.0.27\n# Spin up PosgreSQL 14\ndocker run -d \\\n  --name posgresql-14-playground \\\n  -e \"POSTGRES_PASSWORD=SuperWeakPassword123!\" \\\n  -p 5432:5432 \\\n  postgres:14.1-alpine</code></pre> <p>Starting and stopping these containers is as simple as the commands below.</p> <pre><code># Remember to replace \"container-name\" with the actual container name\ndocker stop container-name\ndocker start container-name</code></pre> <p>Since these are just playground containers, after I've finished testing what I want to test in SQL, I can just nuke them with the following commands</p> <pre><code>docker rm sql-server-2019-playground --force\ndocker rm posgresql-14-playground --force\ndocker rm mysql-8-playground --force</code></pre> <p>But what if you actually want to store the database files outside the container? You can do this by attaching a volume to the folder where the database files inside the container. This makes it much easier to database from, say, a production server back to your local development container.</p> <p>Here we have the same script we used to spin up the SQL Server container, but note the extra part --volume sql-server-2019-project1:/var/opt/mssql. This will create a volume called sql-server-2019-project1 in the /var/lib/docker/volumes/ folder on your machine. You can easily dump a backup file or even drop a mdf and ldf file into the volume, and it will be picked up by SQL Server.</p> <pre><code># Spin up MS SQL Server 2019 Developer edition\ndocker run -d \\\n  -e \"ACCEPT_EULA=Y\" \\\n  -e \"MSSQL_SA_PASSWORD=SuperWeakPassword123!\" \\\n  -p 1433:1433 \\\n  --name sql-server-2019-project1 \\\n  --volume sql-server-2019-project1:/var/opt/mssql \\\n  mcr.microsoft.com/mssql/server:2019-CU18-ubuntu-20.04</code></pre> <p>If we navigate to this volume in the GUI, we can see that there are the following folders in the volume:</p> <ul> <li>data - contains the mdf and ldf files for all databases</li> <li>log - contains the error log and trace files for SQL Server</li> <li>secrets - holds certificates and other secrets</li> </ul> <p></p> <p>Typically, I create a new folder called backups, put the .bak files in that folder and then restore the backups using Azure Data Studio. The allows the volume's files to be easily accessible between my local machine and from within the container.</p>","tags":["Linux","Pos_OS","Docker"]},{"location":"blog/2023-02-17-docker/#conclusion","title":"Conclusion","text":"<p>Installing Docker is very useful for a local development environment. It is particularly useful when working with relational databases and makes it really easy to test software against different versions of the same database engine. With each project running in a different container, switching between projects becomes much easier as each container only has the databases associated with that project.</p>","tags":["Linux","Pos_OS","Docker"]},{"location":"blog/2023-05-06-the-linux-experience/","title":"2023 05 06 the linux experience","text":"<p>Having used Microsoft products throughout my entire life, beginning from MS-DOS 6.1 and progressing all the way to Windows 11, I have occasionally dabbled with Linux. However, in the past, I have consistently returned to Windows.</p> <p>Recently, I came across a challenge on Linus Tech Tips, where they pushed themselves to utilize Linux exclusively for an entire month to gain a deeper understanding of the system with its pros and cons. Inspired by their experiment, I decided to go on a similar journey. Unexpectedly, my Linux exploration lasted well beyond a year, and I am presently using Pop!_OS as my primary operating system.</p>","tags":["Linux","Pop_OS","Experience"]},{"location":"blog/2023-05-06-the-linux-experience/#introduction","title":"Introduction","text":"<p>For the past six months, I have been using Pop!_OS as my primary operating system for work purposes. As a senior full stack developer, my work primarily revolves around creating software using the Microsoft stack, including SQL Server, C#, and Angular. Beyond my professional responsibilities, I am an avid PC gamer and was curious to explore the gaming potential of Linux. I spent slightly over a year exclusively gaming on Pop!_OS without any dual boot setup.</p> <p>I believe that I have used the OS for a sufficient length of time to give a run down of my overall experience for this operating system. Having used Windows for such a long time prior to using Linux, I'll be comparing each Linux experience with the corresponding Windows experience.</p>","tags":["Linux","Pop_OS","Experience"]},{"location":"blog/2023-05-06-the-linux-experience/#updates","title":"Updates","text":"<p>In the world of Windows, every piece of software you install seems to have some sort of automatic update service running in the background. So when you boot up, all your browsers are updating, Adobe is updating, Steam is updating, Epic is updating, and in the background Windows itself is installing updates.</p> <p>In this day and age with easily accessible broadband internet, this is much less of an issue. However, when you go on holiday and there isn't Wi-Fi available, and you are using your limited mobile data plan this is an issue. You can of cause tell your system that you are on a \"metered connection\" but not all the software that you have installed seems to obey this rule.</p> <p>Finally, after updates have completed downloading then you have a few minutes to wait until the Windows takes its time installing these updates.</p> <p>On the other hand on Linux, typically all your software is installed via package managers. For Pop!_OS there are two package managers: \"APT\" and \"Flatpak\". No updates happen unless you kick them off yourself. You can of cause opt in for automatic updates if you wish.</p> <p>I like being more in control of when updates occur. Typically, Microsoft seems to know when I have a work presentation planned or stand-up meeting and is sure to interfere with an update at the same time.</p>","tags":["Linux","Pop_OS","Experience"]},{"location":"blog/2023-05-06-the-linux-experience/#file-locking","title":"File Locking","text":"<p>This \"feature\" in Windows really drives me up the wall. If you've been using Windows for any length of time, when you try to delete or move a file, you'll get that annoying \"the action cannot be completed because the folder or a file in it is open in another program\" dialogue. Then you go looking for the random application that's locking up a file in the folder you're trying to delete, only to find that it's Windows Defender that's scanning the files you're trying to delete.</p> <p>Fortunately, Linux does not have this \"feature\". You can delete the files of an application while it's running, and it will continue to run in memory. If you're downloading a video file, you can watch the downloaded part of the video while it's still downloading without risking breaking the download.</p> <p>Going back to the topic of updates, if you update Firefox on Linux while the Firefox browser is open, if you want the updated version, it's just a matter of closing and reopening Firefox, and you'll have the updated version.</p>","tags":["Linux","Pop_OS","Experience"]},{"location":"blog/2023-05-06-the-linux-experience/#writing-software","title":"Writing Software","text":"<p>Since, I'm a software developer, writing software features in my experience of Pop!_OS. I have written a number of .Net Core and .Net 6 and 7 applications. If you're writing a new application in the latest version of .Net, you'll have no problem writing the application on Linux.</p> <p>Since I mostly write web applications, they usually run in a Docker container or a Linux VM. Writing the software in Linux ensures that it will run on it's intended target machine.</p> <p>However, there are a few pitfalls to be aware of when writing code that needs to run on Linux, particularly when working with files:</p> <ul> <li>When referring to external files, most Linux file systems are     case-sensitive, meaning that my-file.txt and My-File.txt refer to two     separate files. On Windows, these two files are the same file. The solution     is to always use case-sensitive filenames and paths in your code when     reading external folders or files.</li> <li>Always use slashes (/) as path separators. Windows favours backslashes (),     but it works fine with both.</li> </ul> <p>Something that has really helped me to be a more productive developer on Pop!_OS is the JetBrains IDE tool suite. Since I already had experience with JetBrains Rider on Windows, the switch to Linux was virtually seamless.</p> <p>However, there's one tool that I need for my day-to-day work, and the Linux alternatives are pretty lacking. I'm running a Windows 10 virtual machine in VirtualBox primarily to run this tool. That tool is SQL Server Management Studio. There are alternatives such as Azure Data Studio and the SQL Server extension for VS Code, but I have found that SQL Server Management Studio is usually more stable and has more scripting capabilities and has better UI capabilities.</p> <p>If your application depends on either: Winforms, WPF, or you are using an old version of the .Net Framework. Then it would be safer to keep your development work on Windows.</p>","tags":["Linux","Pop_OS","Experience"]},{"location":"blog/2023-05-06-the-linux-experience/#gaming","title":"Gaming","text":"<p>These days, Linux is surprisingly good at running computer games, even those not originally designed for Linux. However, Windows is still the king of PC gaming.</p> <p>I have played a number of indie and AAA games on Pop!_OS including Skyrim, Stardew Valley, Borderlands 3, Mortal Kombat 11, Terraria, Two Point Hospital, The Sims 4, Devil May Cry 1-4, Slim Rancher, Fallout 3 and 4. Just to name a few. Sometimes the framerates were slightly worse than on Windows, but for other games the performance was slightly better. I haven't come across a single Steam game I wanted to play that wouldn't launch at all.</p> <p>Unfortunately, many competitive online games do not play well on Linux due to their anti-cheat software. For example, you probably won't be able to play Rust, PUBG or Dead by Daylight any time soon. Also, if you want to use VR, Linux is still a bit behind.</p> <p>So honestly, if you have a gaming rig and only play PC games. Just use Windows 10 (avoid Windows 11 until they stop breaking gaming performance with their updates). Personally, I switched back to Windows 10 a few weeks ago because I wanted to play Dauntless (doesn't work on Linux due to Easy Anti-Cheat).</p> <p>If you are more of an emulation gamer and like to play your old Playstation 1, 2 and 3 games or the old Nintendo games on the PC, then Linux might be better for you. This is because Linux seems to have more emulator software available than Windows.</p>","tags":["Linux","Pop_OS","Experience"]},{"location":"blog/2023-05-06-the-linux-experience/#conclusion","title":"Conclusion","text":"<p>Both Windows and Pop!_OS are excellent operating systems for getting work done and for gaming. Pop!_OS seems to be much more stable, has a better update strategy and works well as a software development machine. Windows has some tools that are very useful that have no cross-platform alternatives and is still the king of pc gaming.</p> <p>So which one should you choose? If you want a dedicated machine where all your PC games work, you play competitive online games, or you have a VR headset, then go for Windows. If you are a casual gamer, or enjoy a lot of emulation then Pop!_OS should work well for you. If you want a development machine with more configuration options, then Pop!_OS might be an option.</p>","tags":["Linux","Pop_OS","Experience"]},{"location":"blog/2023-11-13-virtualbox/","title":"2023 11 13 virtualbox","text":"<p>VPN software is often a major inconvenience, either blocking Internet access or severely limiting the speed at which you can connect.</p> <p>This makes attending meetings and troubleshooting problems with limited Internet access a challenge. Installing and using VPN software on Linux is also generally quite complicated, as I've outlined in my guide The Battle Between Pop!_OS &amp; VPN Software.</p> <p>A simple solution to these challenges is to run the VPN software inside a virtual machine. This approach ensures that your primary machine remains unaffected by the VPN's limitations. Given the user-friendly nature of most VPN software on Windows, I've chosen to use Windows 10 as my guest Virtual Machine.</p> <p>Another benefit of using a Windows Virtual Machine is the ease with which you can install and run Windows exclusive software, such as Visual Studio, SQL Server Management Studio and Adobe PDF Viewer to name a few. Secondly, if your Windows-only application works perfectly in a VM, you don't have to dual-boot every time you want to use it.</p> <p>For this guide, we are going to be using VirtualBox, which is free for private and commercial use.</p>"},{"location":"blog/2023-11-13-virtualbox/#introduction","title":"Introduction","text":"<p>Skill level required: Intermediate</p> <p>Before we can start using VirtualBox, we need to install it. As with most installations on Linux, we will open the Terminal and run the following to install VirtualBox.</p>"},{"location":"blog/2023-11-13-virtualbox/#installing-virtualbox","title":"Installing VirtualBox","text":"<pre><code>sudo apt update\nsudo apt install virtualbox virtualbox-guest-additions-iso</code></pre>"},{"location":"blog/2023-11-13-virtualbox/#installing-windows-10-in-virtualbox","title":"Installing Windows 10 in VirtualBox","text":"<p>Download the official Windows 10 ISO from Microsoft https://www.microsoft.com/en-gb/software-download/windows10ISO</p> <p>Add a new virtual machine to VirtualBox. Machine &gt;&gt; New</p> <p></p> <p>Name your virtual machine, choose where you want to store its files, select the ISO you downloaded and tick Skip Unattended Installation.</p> <p></p> <p>Depending on the use case for the virtual machine, I choose the memory and processors accordingly. For the VPN virtual machine, 4GB RAM and 2 processors are sufficient. If I'm creating a development machine, I'll go for 8-16GB RAM and 4 processors.</p> <p></p> <p>I usually go with about 80\u2013100GB for Disk Size</p> <p></p> <p>Now the machine is created, but before booting I go to Settings &gt;&gt; Network. I change the Attached to drop down to a Bridged Adapter, and then I select the correct name. If you are connecting the VM to your Wi-Fi network, it will have something starting with wl (wireless lan) and if you are connecting the VM to ethernet, it will start with en.</p> <p>I then uncheck Enable network adapter during installation. This allows me to install Windows 10 using a local user account, rather than linking it to my online Microsoft account. If Microsoft cannot detect that you are connected to a network during installation, it will allow this option.</p> <p>The reason I switch to a bridged adapter is that you generally cannot use VPN software in a VM over NAT.</p> <p></p> <p>Now install Windows as usual</p> <p>Once the Windows 10 installation is complete, and you've booted to the desktop. Enable the network again.</p> <p></p>"},{"location":"blog/2023-11-13-virtualbox/#installing-virtualbox-guest-additions","title":"Installing VirtualBox Guest Additions","text":"<p>The VirtualBox Guest Additions give us a number of useful features:</p> <ul> <li>Screen resizing (via a virtual display driver)</li> <li>Shared clipboard between host and guest machine</li> <li>Shared Folders (file sharing between host and guest)</li> <li> <p>Seamless mode (allows application windows from the guest OS to run directly     on the host desktop)</p> </li> <li> <p>To install Virtualbox Guest Additions, select Devices &gt;&gt; Insert Guest     Additions CD Image...</p> </li> </ul> <p></p> <p>Next, navigate to the connected DVD drive and run the VBoxWindowsAdditions.exe application.</p> <p></p> <p>After the Guest Additions are installed, you'll be prompted to restart the virtual machine.</p> <p>After the restart is complete, you will know that the Guest Additions have been installed correctly if your virtual machine resizes correctly.</p>"},{"location":"blog/2023-11-13-virtualbox/#optional-steps","title":"Optional Steps","text":"<p>These are the typical tweaks I make on every new Windows 10 installation.</p>"},{"location":"blog/2023-11-13-virtualbox/#debloat-windows","title":"Debloat Windows","text":"<p>I like to use a 'Windows 10 Debloater', which removes all the stuff I don't use in the operating system, such as Candy Crush, Cortana and One-drive. Have a look at its README.md to see how to use it</p> <p>https://github.com/Sycnex/Windows10Debloater/archive/refs/heads/master.zip</p>"},{"location":"blog/2023-11-13-virtualbox/#disable-visual-effects","title":"Disable Visual Effects","text":"<p>I usually turn off all visual effects as they just slow the machine down.</p> <p></p> <p>I usually leave Smooth edges of screen fonts alone, otherwise the text on the screen can be very difficult to read.</p> <p></p>"},{"location":"blog/2023-11-13-virtualbox/#replace-the-start-menu-with-open-shell","title":"Replace the Start Menu with Open-Shell","text":"<p>I usually replace the Start Menu with Open-Shell as it loads much faster, and it's easy to configure https://github.com/Open-Shell/Open-Shell-Menu/releases</p>"},{"location":"blog/2023-11-13-virtualbox/#disable-hibernation","title":"Disable Hibernation","text":"<p>Disable system hibernation as it takes up a lot of disk space. Go to the command prompt as an administrator and run the following:</p> <pre><code>powercfg /hibernate off</code></pre>"},{"location":"blog/2023-11-13-virtualbox/#shrink-the-windows-system-partition","title":"Shrink the Windows System partition","text":"<p>I find that Windows keeps trying to use more and more disk space. Even if you free up space, the VirtualBox vdi files continue to use the maximum space the operating system has grown to. To prevent this, I aggressively limit the maximum space that Windows can use for the C drive. I then expand the drive when more space is needed, if I cannot free additional space.</p> <p></p>"},{"location":"blog/2023-11-13-virtualbox/#disable-background-apps","title":"Disable background apps","text":"<p>I'm not sure why Windows thinks it's necessary to have applications like the calculator, 3D viewer and camera running in the background all the time. This is a waste of CPU cycles. I disable all the ones I don't need.</p> <p></p>"},{"location":"blog/2023-11-13-virtualbox/#troubleshooting","title":"Troubleshooting","text":""},{"location":"blog/2023-11-13-virtualbox/#shared-folder-missing-after-vm-is-restarted","title":"Shared folder missing after VM is restarted","text":"<p>Make sure that you select both Auto-mount and Make Permanent when adding a new Shared Folder.</p> <p></p>"},{"location":"blog/2023-11-13-virtualbox/#clipboard-not-working-between-vm-and-host-machine","title":"Clipboard not working between VM and Host machine","text":"<p>Did you turn it on under Devices &gt;&gt; Shared Clipboard &gt;&gt; Bidirectional?</p> <p></p>"},{"location":"blog/2023-11-13-virtualbox/#clipboard-randomly-stops-working","title":"Clipboard randomly stops working","text":"<p>You can fix this by killing the c:\\Windows\\System32\\VBoxTray.exe process and starting it again. I usually put a batch file on my Windows VM desktop as this happens alot for me. I call my batch file fix-clipboard.bat and I put it on my desktop with the content below.</p> <pre><code>:: Terminate the VirtualBox tray application\ntaskkill /F /IM VBoxTray.exe\n:: Restart the VirtualBox tray application\nSTART \"VboxTray\" \"c:\\Windows\\System32\\VBoxTray.exe\"</code></pre>"},{"location":"blog/2023-11-13-virtualbox/#my-vm-has-no-internet-access","title":"My VM has no internet access","text":"<p>If you are using a Bridged Adapter make sure that the Name selected is the name of the network that you are actually using. I.e. wl (wireless lan) if you are connecting via Wi-Fi and if you are connecting the VM to ethernet, it will start with en. Also make sure that Enable Network Adapter is ticked.</p> <p></p>"},{"location":"blog/2023-11-13-virtualbox/#conclusion","title":"Conclusion","text":"<p>After successfully configuring your Virtual Machine (VM), you can proceed to install your preferred VPN software within the VM environment as well as any other tools that are exclusive to Windows.</p> <p>In my personal experience, this approach works with the following VPN software:</p> <ul> <li>FortiClient VPN</li> <li>Cisco AnyConnect</li> <li>Secure Mobility Client</li> <li>Global Protect</li> <li>Azure VPN Client</li> <li>Citrix Workspace App</li> </ul> <p>An additional advantage of adopting this method is that dual-booting your machine is not required.</p>"},{"location":"blog/2023-11-28-dotnet-development/","title":"2023 11 28 dotnet development","text":"<p>C# developers can use Pop!_OS to develop .NET web applications and console applications without any limitations. However, using Pop!_OS to develop applications with legacy versions of the .NET Framework and frontend technologies like ASP.NET Web Forms, ASP.NET MVC, Windows Forms, and WPF is not supported and may result in limited functionality.</p> <p>Note: I successfully followed these instructions on Ubuntu 22.04 LTS as well.</p>"},{"location":"blog/2023-11-28-dotnet-development/#introduction","title":"Introduction","text":"<p>Skill level required: Junior to Intermediate Developer</p> <p>Upon completing this guide, your Pop!_OS installation will be equipped to develop and execute cross-platform .NET applications compatible with Windows, macOS, and other Linux distributions.</p> <p>This guide is intended for C# developers with familiarity of the terminal CLI environment.</p>"},{"location":"blog/2023-11-28-dotnet-development/#installing-net-sdk-and-runtimes","title":"Installing .Net SDK and Runtimes","text":"<p>I recommend using the script-installation method for .NET installation on Pop!_OS. This recommendation comes from the tendency of apt sources to lag behind the official release schedule. For instance, if you wanted to develop a .NET 8 application, its SDK was released just two weeks ago at the time of writing this article, however, it's not available yet via the apt tool. This recommendation aligns with Microsoft's guidelines for .NET installation on Linux.</p> <p>I have based the section of my guide from Microsoft's documentation on installing .Net on Linux https://learn.microsoft.com/en-us/dotnet/core/install/linux-scripted-manual#scripted-install</p> <p>Download installation tool (dotnet-install.sh) and change it to an executable.</p> <pre><code>wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh\nchmod +x ./dotnet-install.sh</code></pre> <p>Next you'll want to install the .Net SDK</p> <pre><code>./dotnet-install.sh --channel 8.0</code></pre> <p>If you are creating a console application you'll want to install the standard runtime</p> <pre><code>./dotnet-install.sh --runtime dotnet --version 8.0.0</code></pre> <p>If you are creating a web application or web api application you'll want to install the aspnetcore runtime.</p> <pre><code>./dotnet-install.sh --runtime aspnetcore --version 8.0.0</code></pre> <p>Add the dotnet executable and globally installed dotnet tools to the path for all users/accounts. This will allow you to run <code>dotnet</code> from the terminal from any location on the machine</p> <pre><code>echo \"export DOTNET_ROOT=$HOME/.dotnet\" | sudo tee /etc/profile.d/dotnet.sh\necho 'export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools' | sudo tee --append /etc/profile.d/dotnet.sh</code></pre> <p>You'll need to log out and log in again for this to take effect or restart your computer.</p> <p>To check that .Net is accessible from your current user, run the following</p> <pre><code>which dotnet\n# should return '/home/your-user-name/.dotnet/dotnet'</code></pre> <p>To check that .Net is accessible to your root (administrator) user, run the following</p> <pre><code>sudo -i\nwhich dotnet\n# should also return '/home/your-user-name/.dotnet/dotnet'\nexit # exit out of the root account</code></pre>"},{"location":"blog/2023-11-28-dotnet-development/#installing-older-unsupported-net-core-sdks-and-runtimes","title":"Installing Older Unsupported .Net Core SDKs and Runtimes","text":"<p>In specific situations, installing an older version of the SDK or Runtimes may be necessary:</p> <ul> <li> <p>Running older .NET Core applications: If you encounter an older .NET Core     application, such as one built for .NET Core 2.1 or 3.1, installing the     corresponding SDK or Runtime version is required for proper execution.</p> </li> <li> <p>Upgrading legacy .NET applications: When upgrading an application from an     older .NET version, it's advisable to follow an incremental approach,     transitioning one LTS (Long-Term Support) version at a time. This ensures     compatibility and minimizes potential issues.</p> </li> </ul> <p>Using one of the scripts below, we can install an older version of the .Net SDK</p> <pre><code>./dotnet-install.sh --channel 3.1 # installs .NET Core 3.1 SDK\n./dotnet-install.sh --channel 2.1 # installs .NET Core 2.1 SDK</code></pre> <p>Running one of the scripts below, we can install a .Net Core 3.1 legacy version of the runtime or aspnetcore environment</p> <pre><code>./dotnet-install.sh --runtime dotnet --version 3.1.32 # installs the latest .Net Core 3.1 runtime\n./dotnet-install.sh --runtime aspnetcore --version 3.1.32 # installs the latest .Net Core 3.1 runtime</code></pre> <p>Similarly, you can install .Net Core 2.1 using the script below.</p> <pre><code>./dotnet-install.sh --runtime dotnet --version 2.1.30 # installs the latest .Net Core 2.1 runtime\n./dotnet-install.sh --runtime aspnetcore --version 2.1.30 # installs the latest .Net Core 2.1 aspnetcore environment</code></pre>"},{"location":"blog/2023-11-28-dotnet-development/#running-a-test-app","title":"Running a test app","text":"<p>We're going to make a directory for our test app and move to that folder</p> <pre><code>mkdir TestApp\ncd TestApp</code></pre> <p>Make a console app. Note that old versions of .Net (2.1 and 3.1) might give you this error \"No usable version of libssl was found\" as soon as you try and create or run an application. See the Troubleshooting section below on fixing the libssl error</p> <pre><code>dotnet new console</code></pre> <p>Execute the console app</p> <pre><code>dotnet run\n# expected output Hello World!</code></pre>"},{"location":"blog/2023-11-28-dotnet-development/#the-ide","title":"The IDE","text":"<p>Most developers don't develop apps from the command line (unless they like Vim, which I don't). The first IDE that we are going to install is Microsoft VSCode.</p> <pre><code>sudo apt install code</code></pre> <p>Upon opening your first .cs file, you'll be presented with a selection of recommended extensions for C# development. Proceed with installing these recommended extensions.</p> <p>Next, launch your test application and set debugging breakpoints. Initiating debugging by pressing F5 will provide you with a basic yet functional C# development IDE.</p> <p></p> <p>At this point, you might find yourself yearning for a more comprehensive IDE than Microsoft VSCode, akin to Visual Studio. However, Visual Studio is not available for Linux, and attempting to run it through a compatibility layer like Wine is not recommended due to compatibility issues.</p> <p>For a free option with enhanced features, you could consider MonoDevelop. However, please note that MonoDevelop is no longer actively supported.</p> <p>Another option is Jetbrains Rider, a cross-platform IDE that is not free but boasts a comprehensive feature set. I've been using Rider for the past year and highly recommend it. Compared to Visual Studio's Professional and Enterprise editions, Rider is significantly more affordable. However, if you were previously using the Visual Studio Community Edition, Rider may be a more expensive alternative.</p> <p>Now you might find yourself wanting with just Microsoft VSCode and missing a more fully featured IDE such as Visual Studio. Unfortunately, Visual Studio is not available on Linux at all, and I wouldn't recommend trying to run in a compatibility layer such as Wine as this doesn't work.</p>"},{"location":"blog/2023-11-28-dotnet-development/#what-about-legacy-net-framework-applications","title":"What about legacy .Net Framework applications?","text":"<p>Can you build and run an old .NET Framework 4.8 legacy application or older on Linux? Yes, but with limitations. You can utilize Mono Project, an open-source reverse-engineered version of the .NET Framework.</p> <p>For maintaining legacy .NET Framework applications, the simplest solution is to use a virtual machine with Windows. However, I intend to investigate the possibility of running some legacy .NET Framework applications on Linux.</p>"},{"location":"blog/2023-11-28-dotnet-development/#attempting-to-run-a-windows-forms-application-on-pop_os","title":"Attempting to run a Windows Forms application on Pop!_OS","text":"<p>To run WinForms applications on Pop!_OS, follow these steps.</p> <p>Install Mono: Begin by installing Mono, the open-source implementation of the  .NET Framework. Use the following command in your terminal:</p> <pre><code>sudo apt install mono-complete</code></pre> <p>Launch the WinForms Application: Once Mono is installed, you can launch your  WinForms application using the following command:</p> <pre><code>mono name-of-your-application.exe</code></pre> <p>Here is a small trivial C# .Net Framework application running in Pop!_OS</p> <p></p> <p>While running legacy .NET Framework applications on Linux using Mono is possible, there are some drawbacks to consider:</p> <ul> <li> <p>Appearance: The application's user interface may not integrate     seamlessly with the native Linux environment, giving it a non-native look     and feel.</p> </li> <li> <p>Stability: While the application may function in Linux, it may exhibit     unexpected crashes or instability compared to its performance in Windows.</p> </li> <li> <p>Development Limitations: The absence of a drag-and-drop editor for     WinForms applications on Linux can hinder the development process. To get     around this I have a Windows 10 virtual machine in Virtualbox with Visual     Studio installed for convenient editing and debugging.</p> </li> </ul>"},{"location":"blog/2023-11-28-dotnet-development/#troubleshooting","title":"Troubleshooting","text":""},{"location":"blog/2023-11-28-dotnet-development/#fixing-the-libssl-error","title":"Fixing the libssl error","text":"<p>It appears that .NET Core 2.1 and 3.1 require an older version of the OpenSSL library. If this library is not present you will get the error \"No usable version of libssl was found\". To resolve this error try the following steps:</p> <p>Download the necessary OpenSSL library files:</p> <pre><code>wget \"http://security.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0.0_1.0.2n-1ubuntu5.13_amd64.deb\"\nwget \"http://security.ubuntu.com/ubuntu/pool/main/o/openssl1.0/libssl1.0-dev_1.0.2n-1ubuntu5.13_amd64.deb\"</code></pre> <p>If the 'wget' command fails, manually navigate to the URL http://security.ubuntu.com/ubuntu/pool/main/o/openssl1.0/ and update the script with the newer versions of the two packages above.</p> <p>Install the downloaded OpenSSL library files</p> <pre><code>sudo dpkg -i libssl1.0.0_1.0.2n-1ubuntu5.13_amd64.deb\nsudo dpkg -i libssl1.0-dev_1.0.2n-1ubuntu5.13_amd64.deb</code></pre>"},{"location":"blog/2023-11-28-dotnet-development/#conclusion","title":"Conclusion","text":"<p>Pop!_OS is capable of cross-platform C# applications with the correct setup, including console and web applications. Additionally, you can create cross-platform desktop applications using C# UI frameworks like Avalonia and Eto.Forms.</p> <p>Moreover, you can even build and run .NET Framework applications on Linux with the assistance of Mono with limited functionality.</p> <p>I typically develop .Net Web API backend applications with an Angular frontend.  In the next article, we'll dive into the process of installing Node and Angular on Pop!_OS.</p>"},{"location":"blog/2023-12-05-angular/","title":"2023 12 05 angular","text":"<p>If you are developing web frontends, you likely use React, Angular, or Vue.js. These JavaScript frameworks are commonly used to create interactive and dynamic web user interfaces. Regardless of the chosen framework, you will need Node.js to run these applications. </p> <p>This guide will cover setting up your frontend development environment in Pop!_OS. The instructions provided here are also applicable to Ubuntu 22.04.</p>"},{"location":"blog/2023-12-05-angular/#introduction","title":"Introduction","text":"<p>Skill level required: Junior to Intermediate Developer</p> <p>This guide focuses on why you should not install Node.js directly via apt and instead use NVM (Node Version Manager). You will often need different versions of Node.js for different projects. For example, an older project might require an older version of Node.js, while a newer project might require a newer version.</p> <p>By the end of this guide you should have NVM installed and be able to continue your front end development journey on Pop!_OS.</p>"},{"location":"blog/2023-12-05-angular/#dont-use-apt-to-install-nodejs-and-npm","title":"Don't use apt to install Node.js and npm","text":"<p>Typically, you'll install most software on Pop!_OS and Ubuntu using apt as it's a very simple way to install 1000s of software in the Linux world.</p> <p>So you'd be tempted to just install Node.js and npm via apt. Do not do this. Avoid installing Node.js and npm via apt for the following reasons:</p> <ul> <li>Outdated Node.js Version: The apt sources on Ubuntu and Pop!_OS provide Node.js v12.22.9, which is an outdated version released in January 2022. This outdated version of Node.js does not work with the latest version of Angular.</li> <li>Permission Issues with npm: Installing npm via apt causes it to store files in /usr/local/lib/node_modules, a system path that requires root privileges for writing. This necessitates using sudo with every npm install command, including those within Angular projects. Additionally, building Angular projects with sudo grants ownership of the built files to the root account, restricting access for non-root users.</li> <li>Variable Angular Requirements: Different Angular projects may have varying dependencies on specific Angular and Node.js versions. Simply installing the latest Node.js version may not be good enough for all projects.</li> </ul>"},{"location":"blog/2023-12-05-angular/#installing-nodejs-with-nvm","title":"Installing Node.js with NVM","text":"<p>NVM stands for Node Version Manager, and it works with most flavors of Linux and macOS. NVM allows you to install multiple versions of Node at the same time and to very easily switch between them. This is extremely helpful if you have multiple projects each of which are using different versions of Angular. By using NVM you can simply switch to the right version of Node.js to build the project that you are trying to build.</p> <p>On a side note there is an excellent port of NVM called nvm-windows if you want to use NVM but are stuck with Windows.  </p> <p>Additionally, NVM runs from your /home/your-user-name/.nvm folder and runs under your user account, so you don't have to use sudo commands which means that you won't run into permission issues.</p> <p>To install NVM we simply run the following command</p> <pre><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash</code></pre> <p>the NVM installer adds additional lines to your .bashrc file (more information on this in the Appendix) so that the NVM script is accessible from your path. You can either just close your terminal window and start a new one for this change to take effect OR you can just use the source command below.</p> <pre><code>source ~/.bashrc</code></pre> <p>Confirm that NVM is installed</p> <pre><code>nvm --version\n# returns: 0.39.5 (or newer if you have installed a newer version)</code></pre> <p>Installing the latest lts version of Node.js</p> <pre><code>nvm install --lts</code></pre> <p>Using the latest version of Node.js</p> <pre><code>nvm use --lts</code></pre> <p>I use Node.js with Angular and installing Angular works as expected with the following command.</p> <pre><code>npm install --global @angular/cli</code></pre>"},{"location":"blog/2023-12-05-angular/#example-use-case-upgrading-an-angular-7-app","title":"Example use case: Upgrading an Angular 7 app","text":"<p>In the next few weeks, I'm going to be inheriting an application that is using Angular 7. Now Angular 7 is no longer supported (it's support ended in 2019), and I'll need to upgrade this application all way to at least Angular 15.</p> <p>Now I can check which version of node works with which version of Angular using https://angular.io/guide/versions</p> <p>I can see that I'll need Node.js 10.9.0 to build this Angular 7 app, which I'll install and use with the following.</p> <pre><code>nvm install 10.9.0\nnvm use 10.9.0</code></pre> <p>Then I'd read the Angular upgrade instructions on https://update.angular.io/ which would lead me to run the following </p> <pre><code>NG_DISABLE_VERSION_CHECK=1 npx @angular/cli@8 update @angular/cli@8 @angular/core@8</code></pre> <p>Then it's just a matter of testing and then repeating these steps all the way up to Angular 15. By using NVM I can very easily switch to the versions of the Angular CLI and the node that I need to complete this upgrade without having to uninstall and re-install node and npm packages constantly as I slowly upgrade the project.</p>"},{"location":"blog/2023-12-05-angular/#appendix","title":"Appendix","text":""},{"location":"blog/2023-12-05-angular/#what-is-the-bashrc-file","title":"What is the .bashrc file","text":"<p>The .bashrc file is a shell script that Bash executes whenever it is initiated. This means that the commands and settings in the .bashrc file will be applied every time you open a new terminal window. The .bashrc file is located in the user's home directory, and it is only accessible to that user.</p> <p>The .bashrc file can be used to configure a variety of settings, including:</p> <ul> <li>Aliases: Aliases are shortcuts for longer commands. For example, you could create an alias called ll that would run the ls -l command.</li> <li>Variables: Variables can be used to store values that can be used in commands. The most common Variable being the PATH variable for allowing you to run executables from another location from the current directory</li> <li>Functions: Functions are reusable blocks of code that can be called from other commands. For example, you could create a function that would generate a random number.</li> </ul> <p>Here are some examples of how you can use the .bashrc file:</p> <p>Create an alias for the ls command (which is much more useful than the default ls command):</p> <pre><code>alias ll='ls -l'</code></pre> <p>Adding a new folder /opt/camunda-modeler to the PATH this lets me execute the executables in the /opt/camunda-modeler from any folder</p> <pre><code>export PATH=$PATH:/opt/camunda-modeler</code></pre> <p>Create a function to generate a random number:</p> <pre><code>random_number() {\n  echo $RANDOM\n}</code></pre> <p>These are just a few examples of the many things you can do with the .bashrc file. For more information, please refer to the Bash documentation.</p>"},{"location":"blog/2023-12-05-angular/#conclusion","title":"Conclusion","text":"<p>You should now have a working Node.js environment in Pop!_OS (or Ubuntu 22.04).</p> <p>The apt tool is useful for installing large amounts of software in the Linux/Debian ecosystem. However, it's not always the best way to install developer tools, as sometimes the packages are quite out of date.</p> <p>We've learnt that it's better to use NVM (Node Version Manager) to install and switch between different node versions without having to uninstall and reinstall Node.js.</p>"}]}