{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Hi I'm Michael and welcome to my blog. I'm a software developer, a gamer, and an aspiring technical writer. I'm going to be writing about dedicated game servers, productivity software, Linux and pretty much anything that I find interesting. Follow me in my transition from Windows to Linux for work and gaming .","title":"Welcome"},{"location":"#welcome","text":"Hi I'm Michael and welcome to my blog. I'm a software developer, a gamer, and an aspiring technical writer. I'm going to be writing about dedicated game servers, productivity software, Linux and pretty much anything that I find interesting. Follow me in my transition from Windows to Linux for work and gaming .","title":"Welcome"},{"location":"blog/2021-01-15-terraria-dedicated-server/","tags":["Azure"],"text":"A guide on how to run your own dedicated Terraria server in Azure. Introduction \u00b6 Skill Level Required: Intermediate Firstly, if you have never heard of Terraria before, just do yourself a favour and buy a copy on Steam or GOG . Now, Terraria is a very fun game in single-player mode. But as with most games, it's much more fun to play it with friends. Now you might be asking yourself, why would I want to create my own dedicated server over just inviting my friends over Steam? Here are a few advantages of having a dedicated Terraria Server: Not everyone plays Terraria on Steam and Steam players cannot easily play with GOG players. Some people live in apartments with shared wifi and the router is not accessible for setting up port forwarding etc. Most people use wifi these days and if you host the game with your wifi network then everyone else will have additional latency. If one person is hosting the game and decides that they have had enough then no one else can play. If you want to change game hosts you need to manually copy the game world between people. Why would you want to set up your own private server over using a dedicated server platform that does all the work for you? Well, I live in South Africa and I couldn't find a dedicated server platform for this country and having the game hosted in the States will add too much latency You looking at $10-$30 per month, regardless of how much you and your friends are playing. I'd rather have a server that I pay per hour and can turn off when it's not needed. Getting Started \u00b6 You going to need the following for this tutorial: An Azure Account for hosting your dedicated server. An ssh client, I'm going to be using Snowflake but you can use Putty if you prefer. I just find Snowflake to be easier to use in general. A copy of Terraria on Steam or GOG Creating And Configuring An Azure Virtual Machine \u00b6 Creating Your First Ubuntu Virtual Machine \u00b6 Now I'm going to assume that you have created an Azure account and you have logged in. The first thing that you going to need to do is to create a Resource Group . Now a Resource Group is just a grouping of your VMs, storage volumes, virtual network interfaces that you have in your Azure account. To create a Resource Group simply click on the Resource Groups button. Next click on the Create button Now create a name for the Resource Group . I went for \"Terraria-LAN-RG\" and select a region nearby. Select the Review + create button, double-check your choices and if satisfied select the Create button. Now we open our newly created Resource Group Next, we want to create a Virtual Machine resource. We click on the Create button and we are going to select Ubuntu Server 20.04 LTS . Complete the form and make sure that you choose Standard B2 or any other option with at least 4GB of RAM for the Size and Password for Authentication Type . Make sure you create a nice strong password for the virtual machine. Keep the username and password handy as you are going to need them for the rest of this tutorial. Select the Next: Disks button Change the OS disk type to Standard HDD since we don't need fast disk speeds for a Terraria server. Select Review + create button, double-check your settings and select the Create button. You'll need to wait 2 minutes or so for Azure to create your virtual machine. Once the deployment is complete, select the Go to resource button Configuring Your Virtual Machine \u00b6 The first thing we are going to do is give our virtual machine a DNS name by clicking on the Configure link under Networking since IP addresses are much harder to remember Change the IP address assignment to Static and give the server any DNS name that you like, I called mine terraria-lan . Now click on the Save button. Go back to the Overview screen of your Virtual Machine . Take note of your Public IP address and DNS name as you'll need these later. Next, we need to go to Networking and open port 7777 (Terraria's default port) Select Add inbound port add button. Set the Destination port ranges to 7777 followed by the Add button. The last thing that you might want to change is the Auto-Shutdown under Operations in the side menu. Having the Auto Shutdown will save you money but make sure you select a time that you are unlikely to be mid-game. Running Your Server \u00b6 Now that your Virtual Machine is up and running. We need to do the following: Getting the server files from the Terraria website Transfer the server files to your new virtual machine Starting up the server Getting The Server Files \u00b6 Download the latest version of Terraria Server , at the time of writing it was a version 1.4.3.2 and extract it to somewhere convenient on your computer. I went with c:\\temp\\terraria-server-1432 Open the subfolder 1432\\Linux and it should look something like the screenshot below. Transfering The Server Files To Your Virtual Machine \u00b6 Fire up Snowflake . Add a New Connection . Create a New Site . Name - Any name you want to call it. I called my site Terraria-Server . Host - the DNS name that you captured earlier User - the username you created for your VM Password - the password you created for your VM Terraria Server files Click on the Connect button. You'll get a notification that looks something like this. Click on Yes In the Files section in SnowFlake . Change your path to the location where you extracted your Terraria Server files. Just drag and drop your files from your Windows machine (on the right) to your Azure Ubuntu Server on the left. Select Yes . Then select OK . This might take a minute or two to complete. Setting Up Your Server \u00b6 Next, go to the Terminal tab in SnowFlake . Now you can run any Linux command line commands here on your Ubuntu Virtual Machine. The first one we going to use is the ls command see confirm that we copied over all the files correctly. ls ## Expected output ## FNA.dll FNA.dll.config Terraria-min.png TerrariaServer TerrariaServer.bin.x86_64... If we can see all the files, we need to make the TerrariaServer.bin.x86_64 file executable. We do this with the chmod command below chmod +x TerrariaServer.bin.x86_64 Now we can start our server by running TerrariaServer.bin.x86_64 . Note the \"./\" prefix make sure you include that. ./TerrariaServer.bin.x86_64 Follow the prompts for creating your server Follow the prompts and if you see the following: Note: In future, you'll just need to run the command below to run your server. ./TerrariaServer.bin.x86_64 Connecting To Your New Server \u00b6 Now we start up Terraria . Select Multiplayer followed by Join via IP . Select/Create your Character. Note that Classic characters can only play in Classic worlds, same for Journeyman characters. Keep the default Port Fill in the Server password Keep an eye on the server terminal window for any errors and to see who cannot join and why. If all goes well you'll be in the game and your friends can join. Have fun!!!","title":"Creating A Dedicated Cloud Server For Terraria In Azure"},{"location":"blog/2021-01-15-terraria-dedicated-server/#introduction","text":"Skill Level Required: Intermediate Firstly, if you have never heard of Terraria before, just do yourself a favour and buy a copy on Steam or GOG . Now, Terraria is a very fun game in single-player mode. But as with most games, it's much more fun to play it with friends. Now you might be asking yourself, why would I want to create my own dedicated server over just inviting my friends over Steam? Here are a few advantages of having a dedicated Terraria Server: Not everyone plays Terraria on Steam and Steam players cannot easily play with GOG players. Some people live in apartments with shared wifi and the router is not accessible for setting up port forwarding etc. Most people use wifi these days and if you host the game with your wifi network then everyone else will have additional latency. If one person is hosting the game and decides that they have had enough then no one else can play. If you want to change game hosts you need to manually copy the game world between people. Why would you want to set up your own private server over using a dedicated server platform that does all the work for you? Well, I live in South Africa and I couldn't find a dedicated server platform for this country and having the game hosted in the States will add too much latency You looking at $10-$30 per month, regardless of how much you and your friends are playing. I'd rather have a server that I pay per hour and can turn off when it's not needed.","title":"Introduction"},{"location":"blog/2021-01-15-terraria-dedicated-server/#getting-started","text":"You going to need the following for this tutorial: An Azure Account for hosting your dedicated server. An ssh client, I'm going to be using Snowflake but you can use Putty if you prefer. I just find Snowflake to be easier to use in general. A copy of Terraria on Steam or GOG","title":"Getting Started"},{"location":"blog/2021-01-15-terraria-dedicated-server/#creating-and-configuring-an-azure-virtual-machine","text":"","title":"Creating And Configuring An Azure Virtual Machine"},{"location":"blog/2021-01-15-terraria-dedicated-server/#creating-your-first-ubuntu-virtual-machine","text":"Now I'm going to assume that you have created an Azure account and you have logged in. The first thing that you going to need to do is to create a Resource Group . Now a Resource Group is just a grouping of your VMs, storage volumes, virtual network interfaces that you have in your Azure account. To create a Resource Group simply click on the Resource Groups button. Next click on the Create button Now create a name for the Resource Group . I went for \"Terraria-LAN-RG\" and select a region nearby. Select the Review + create button, double-check your choices and if satisfied select the Create button. Now we open our newly created Resource Group Next, we want to create a Virtual Machine resource. We click on the Create button and we are going to select Ubuntu Server 20.04 LTS . Complete the form and make sure that you choose Standard B2 or any other option with at least 4GB of RAM for the Size and Password for Authentication Type . Make sure you create a nice strong password for the virtual machine. Keep the username and password handy as you are going to need them for the rest of this tutorial. Select the Next: Disks button Change the OS disk type to Standard HDD since we don't need fast disk speeds for a Terraria server. Select Review + create button, double-check your settings and select the Create button. You'll need to wait 2 minutes or so for Azure to create your virtual machine. Once the deployment is complete, select the Go to resource button","title":"Creating Your First Ubuntu Virtual Machine"},{"location":"blog/2021-01-15-terraria-dedicated-server/#configuring-your-virtual-machine","text":"The first thing we are going to do is give our virtual machine a DNS name by clicking on the Configure link under Networking since IP addresses are much harder to remember Change the IP address assignment to Static and give the server any DNS name that you like, I called mine terraria-lan . Now click on the Save button. Go back to the Overview screen of your Virtual Machine . Take note of your Public IP address and DNS name as you'll need these later. Next, we need to go to Networking and open port 7777 (Terraria's default port) Select Add inbound port add button. Set the Destination port ranges to 7777 followed by the Add button. The last thing that you might want to change is the Auto-Shutdown under Operations in the side menu. Having the Auto Shutdown will save you money but make sure you select a time that you are unlikely to be mid-game.","title":"Configuring Your Virtual Machine"},{"location":"blog/2021-01-15-terraria-dedicated-server/#running-your-server","text":"Now that your Virtual Machine is up and running. We need to do the following: Getting the server files from the Terraria website Transfer the server files to your new virtual machine Starting up the server","title":"Running Your Server"},{"location":"blog/2021-01-15-terraria-dedicated-server/#getting-the-server-files","text":"Download the latest version of Terraria Server , at the time of writing it was a version 1.4.3.2 and extract it to somewhere convenient on your computer. I went with c:\\temp\\terraria-server-1432 Open the subfolder 1432\\Linux and it should look something like the screenshot below.","title":"Getting The Server Files"},{"location":"blog/2021-01-15-terraria-dedicated-server/#transfering-the-server-files-to-your-virtual-machine","text":"Fire up Snowflake . Add a New Connection . Create a New Site . Name - Any name you want to call it. I called my site Terraria-Server . Host - the DNS name that you captured earlier User - the username you created for your VM Password - the password you created for your VM Terraria Server files Click on the Connect button. You'll get a notification that looks something like this. Click on Yes In the Files section in SnowFlake . Change your path to the location where you extracted your Terraria Server files. Just drag and drop your files from your Windows machine (on the right) to your Azure Ubuntu Server on the left. Select Yes . Then select OK . This might take a minute or two to complete.","title":"Transfering The Server Files To Your Virtual Machine"},{"location":"blog/2021-01-15-terraria-dedicated-server/#setting-up-your-server","text":"Next, go to the Terminal tab in SnowFlake . Now you can run any Linux command line commands here on your Ubuntu Virtual Machine. The first one we going to use is the ls command see confirm that we copied over all the files correctly. ls ## Expected output ## FNA.dll FNA.dll.config Terraria-min.png TerrariaServer TerrariaServer.bin.x86_64... If we can see all the files, we need to make the TerrariaServer.bin.x86_64 file executable. We do this with the chmod command below chmod +x TerrariaServer.bin.x86_64 Now we can start our server by running TerrariaServer.bin.x86_64 . Note the \"./\" prefix make sure you include that. ./TerrariaServer.bin.x86_64 Follow the prompts for creating your server Follow the prompts and if you see the following: Note: In future, you'll just need to run the command below to run your server. ./TerrariaServer.bin.x86_64","title":"Setting Up Your Server"},{"location":"blog/2021-01-15-terraria-dedicated-server/#connecting-to-your-new-server","text":"Now we start up Terraria . Select Multiplayer followed by Join via IP . Select/Create your Character. Note that Classic characters can only play in Classic worlds, same for Journeyman characters. Keep the default Port Fill in the Server password Keep an eye on the server terminal window for any errors and to see who cannot join and why. If all goes well you'll be in the game and your friends can join. Have fun!!!","title":"Connecting To Your New Server"},{"location":"blog/2021-01-27-manictime/","tags":["Performance"],"text":"A guide on how to save time in capturing timesheets with the assistance of ManicTime Introduction \u00b6 Skill level required: Beginner Consider these questions: Did I start start my day at 7:30 AM or 7:45 AM? Did I spend 15 minutes or 45 minutes looking at a support ticket? How long was I out for my lunch break? Am I working too many hours or too few hours? When I forget to complete my timesheet every day, how do I figure out what I did? If you answered yes to any of the above questions, and you work on a computer most of the day, then ManicTime is there to answer all of the above questions. ManicTime Basics \u00b6 In a nutshell, all that ManicTime does is track the duration and time that each window is focused for. So if you answer a call in Teams, reply to emails or get some development work done you can figure out everything that happened after it's happened and you no longer have to guess. Let us break the UI down into its pieces: The first row is custom Tags and comments for each task that you've performed for the day. More on this later. The next row is Computer Usage which measures Active (working on the computer) vs Inactive time (e.g. when your computer is locked or you step away for 10 minutes or more). The Applications tab shows the focused window throughout the whole day The Documents tab shows the name of the currently opened browser window or the current file open in a program like Visual Studio or VSCode. If you click on any tab, the reporting information changes to that tab. e.g. if I select the Applications tab I can now see how long each window was focused for. Now where the superpowers come in with this tool is one can filter on the results to get an idea of when they started and ended a task. e.g. I'm going to filter on \"manictime.md\" I can see when I started writing this blog post Then I can just highlight and tag the time. First, we type in the project we want to assign the time to, in this case, \" Blog\" and add a note of what you were doing. You can also easily drag and drop the start and end times for each tag. Finally, I can can then use the details in the captured tags for completing my timesheet for the day. ManicTime Professional Edition \u00b6 These are are the core features of ManicTime and all included in the free version. I haven't needed the professional version of the tool but it does have some enticing features such as: Periodic screenshots (every 60 seconds by default) which help you guess what you were busy with at that time. A reminder to capture what you did in the past x number of minutes. Automatic time tagging using custom rules. A whole client/server system for working with a team. Conclusion \u00b6 Even the free edition of ManicTime is very useful. You know exactly when you started; how long your lunch break was etc... answering all of the questions we started with. When you get to the end of the day, you know exactly what you did, and timesheets become a breeze. What are you waiting for? Give ManicTime a try.","title":"Taming Your Timesheet With ManicTime"},{"location":"blog/2021-01-27-manictime/#introduction","text":"Skill level required: Beginner Consider these questions: Did I start start my day at 7:30 AM or 7:45 AM? Did I spend 15 minutes or 45 minutes looking at a support ticket? How long was I out for my lunch break? Am I working too many hours or too few hours? When I forget to complete my timesheet every day, how do I figure out what I did? If you answered yes to any of the above questions, and you work on a computer most of the day, then ManicTime is there to answer all of the above questions.","title":"Introduction"},{"location":"blog/2021-01-27-manictime/#manictime-basics","text":"In a nutshell, all that ManicTime does is track the duration and time that each window is focused for. So if you answer a call in Teams, reply to emails or get some development work done you can figure out everything that happened after it's happened and you no longer have to guess. Let us break the UI down into its pieces: The first row is custom Tags and comments for each task that you've performed for the day. More on this later. The next row is Computer Usage which measures Active (working on the computer) vs Inactive time (e.g. when your computer is locked or you step away for 10 minutes or more). The Applications tab shows the focused window throughout the whole day The Documents tab shows the name of the currently opened browser window or the current file open in a program like Visual Studio or VSCode. If you click on any tab, the reporting information changes to that tab. e.g. if I select the Applications tab I can now see how long each window was focused for. Now where the superpowers come in with this tool is one can filter on the results to get an idea of when they started and ended a task. e.g. I'm going to filter on \"manictime.md\" I can see when I started writing this blog post Then I can just highlight and tag the time. First, we type in the project we want to assign the time to, in this case, \" Blog\" and add a note of what you were doing. You can also easily drag and drop the start and end times for each tag. Finally, I can can then use the details in the captured tags for completing my timesheet for the day.","title":"ManicTime Basics"},{"location":"blog/2021-01-27-manictime/#manictime-professional-edition","text":"These are are the core features of ManicTime and all included in the free version. I haven't needed the professional version of the tool but it does have some enticing features such as: Periodic screenshots (every 60 seconds by default) which help you guess what you were busy with at that time. A reminder to capture what you did in the past x number of minutes. Automatic time tagging using custom rules. A whole client/server system for working with a team.","title":"ManicTime Professional Edition"},{"location":"blog/2021-01-27-manictime/#conclusion","text":"Even the free edition of ManicTime is very useful. You know exactly when you started; how long your lunch break was etc... answering all of the questions we started with. When you get to the end of the day, you know exactly what you did, and timesheets become a breeze. What are you waiting for? Give ManicTime a try.","title":"Conclusion"},{"location":"blog/2022-11-19-windows-to-linux/","tags":["Linux","Pos_OS"],"text":"This is the start of a blog series about my journey of switching over from being a dedicated Windows fan over to a Linux user, specifically Pop!_OS. Here I'll be sharing the hurdles and complications I encountered and my solutions to those complications. I am now using Linux for my gaming machine and for my work laptop. I hope that reading about my journey will help smoothen your journey into the world of Linux! Introduction \u00b6 Skill level required: Intermediate Before you even consider Linux as a solution to your computing needs you need to ask yourself why. Why would you like to switch over to Linux? Here are some good reasons to try Linux: You want to learn something new You enjoy tinkering You cannot afford a new computer and your current machine is getting slower every day. Your computer is getting quite old and your current Windows installation is no longer supported You don't like the new built-in telemetry ads in Windows You cannot upgrade to Windows 11 Reasons not to switch to Linux: You are not technical (Installing and setting up Linux is not for computer novices). Also, you WILL encounter issues that will require googling and figuring out. You have specific software that you HAVE to use and this software isn't available for Linux. e.g. Photoshop, Microsoft Office, Adobe Premiere, etc... You expect everything to be free on Linux. You'll be surprised just how much commercial software is available on Linux. There is some excellent free software available out there but sometimes the commercial options are significantly better. Trying Out Linux \u00b6 Before you decide to install Linux remember that you can try Linux our first as most Linux distributions have what is known as a Live Distro or Live CD. So you can test if Linux works on your hardware and see what software works for you before taking the plunge and installing it. When it comes to trying out and installing other operating systems. I would recommend that you use the tool called Ventoy . Ventoy allows you boot an operating system by just copying the ISO file of operating system onto a bootable flash drive. It even works for Windows 10 and 11. Next have a look at Distrowatch and have a look to see which of the top 5 distro you like the most. I selected POP!_OS because I had heard about it quite a bit of YouTube, and it seemed to be beginner-friendly. Linux Mint is another good option but for the rest of my guide I'll be assuming that you are using POP!_OS . Install Ventoy and download the ISOs of the Linux distros that you would like to try. Then simply reboot your computer, enter into your boot menu and boot Linux to try it. The main things you want to see is the following: Do you like the look and feel of the system? Does all your hardware work: i.e. test your ethernet and Wi-Fi connectivity, test that your sound works. Confirm that the software that you want to use on the system is available on your selected distro Cross-Platform Software \u00b6 I would recommend that you switch over to using cross-platform software whenever possible as this will make your transition over to Linux much simpler. So for example instead of using Microsoft Office, either make sure that you're using the web version of the office suite or make sure that you are using Libre-office Forcing yourself to use the software that you are going to use on your future Linux system will make the transition much more seamless. Here are some Windows/Mac only tools with some cross-platform suggestions to use instead: Microsoft Office - Web version of the Microsoft Office Suite, Google Suite or Libre-Office Paint.NET - Pinta (note that I'm not going to recommend GIMP as it is very complicated to use) Adobe Premiere - DaVinci Resolve Visual Studio - VsCode or JetBrains Tool Suite Microsoft Teams - Web version of Microsoft Teams Outlook - Web version of Outlook SQL Server Management Studio - Azure Data Studio and JetBrains DataGrip Ableton Live - Bitwig or Ardour If there is software that you cannot find an appropriate cross-platform alternative. Then I'm afraid Linux is probably not for you. But before you give up though, I'd have a look at Codeweavers Crossover which is a compatibility tool for running Windows specific software on Linux (or Mac). Alternatively, you could go with the free option of Wine to run your Windows specific tools on Linux. Personally I've had very limited success with this route. What Is Next \u00b6 The first thing I did in the Linux would was something unusual. I switched to Pop!_OS on my gaming PC. Just a few years ago gaming on Linux was really difficult to do, but this is no longer the case. We'll be looking at installing Steam and gaming on Pop!_OS next.","title":"Ditching Windows and Switching to Linux"},{"location":"blog/2022-11-19-windows-to-linux/#introduction","text":"Skill level required: Intermediate Before you even consider Linux as a solution to your computing needs you need to ask yourself why. Why would you like to switch over to Linux? Here are some good reasons to try Linux: You want to learn something new You enjoy tinkering You cannot afford a new computer and your current machine is getting slower every day. Your computer is getting quite old and your current Windows installation is no longer supported You don't like the new built-in telemetry ads in Windows You cannot upgrade to Windows 11 Reasons not to switch to Linux: You are not technical (Installing and setting up Linux is not for computer novices). Also, you WILL encounter issues that will require googling and figuring out. You have specific software that you HAVE to use and this software isn't available for Linux. e.g. Photoshop, Microsoft Office, Adobe Premiere, etc... You expect everything to be free on Linux. You'll be surprised just how much commercial software is available on Linux. There is some excellent free software available out there but sometimes the commercial options are significantly better.","title":"Introduction"},{"location":"blog/2022-11-19-windows-to-linux/#trying-out-linux","text":"Before you decide to install Linux remember that you can try Linux our first as most Linux distributions have what is known as a Live Distro or Live CD. So you can test if Linux works on your hardware and see what software works for you before taking the plunge and installing it. When it comes to trying out and installing other operating systems. I would recommend that you use the tool called Ventoy . Ventoy allows you boot an operating system by just copying the ISO file of operating system onto a bootable flash drive. It even works for Windows 10 and 11. Next have a look at Distrowatch and have a look to see which of the top 5 distro you like the most. I selected POP!_OS because I had heard about it quite a bit of YouTube, and it seemed to be beginner-friendly. Linux Mint is another good option but for the rest of my guide I'll be assuming that you are using POP!_OS . Install Ventoy and download the ISOs of the Linux distros that you would like to try. Then simply reboot your computer, enter into your boot menu and boot Linux to try it. The main things you want to see is the following: Do you like the look and feel of the system? Does all your hardware work: i.e. test your ethernet and Wi-Fi connectivity, test that your sound works. Confirm that the software that you want to use on the system is available on your selected distro","title":"Trying Out Linux"},{"location":"blog/2022-11-19-windows-to-linux/#cross-platform-software","text":"I would recommend that you switch over to using cross-platform software whenever possible as this will make your transition over to Linux much simpler. So for example instead of using Microsoft Office, either make sure that you're using the web version of the office suite or make sure that you are using Libre-office Forcing yourself to use the software that you are going to use on your future Linux system will make the transition much more seamless. Here are some Windows/Mac only tools with some cross-platform suggestions to use instead: Microsoft Office - Web version of the Microsoft Office Suite, Google Suite or Libre-Office Paint.NET - Pinta (note that I'm not going to recommend GIMP as it is very complicated to use) Adobe Premiere - DaVinci Resolve Visual Studio - VsCode or JetBrains Tool Suite Microsoft Teams - Web version of Microsoft Teams Outlook - Web version of Outlook SQL Server Management Studio - Azure Data Studio and JetBrains DataGrip Ableton Live - Bitwig or Ardour If there is software that you cannot find an appropriate cross-platform alternative. Then I'm afraid Linux is probably not for you. But before you give up though, I'd have a look at Codeweavers Crossover which is a compatibility tool for running Windows specific software on Linux (or Mac). Alternatively, you could go with the free option of Wine to run your Windows specific tools on Linux. Personally I've had very limited success with this route.","title":"Cross-Platform Software"},{"location":"blog/2022-11-19-windows-to-linux/#what-is-next","text":"The first thing I did in the Linux would was something unusual. I switched to Pop!_OS on my gaming PC. Just a few years ago gaming on Linux was really difficult to do, but this is no longer the case. We'll be looking at installing Steam and gaming on Pop!_OS next.","title":"What Is Next"}]}