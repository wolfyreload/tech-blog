{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Hi I'm Michael and welcome to my blog. I'm a software developer, a gamer, and an aspiring technical writer. I'm going to be writing about dedicated game servers, productivity software, Linux and pretty much anything that I find interesting. Follow me in my transition from Windows to Linux for work and gaming .","title":"Welcome"},{"location":"#welcome","text":"Hi I'm Michael and welcome to my blog. I'm a software developer, a gamer, and an aspiring technical writer. I'm going to be writing about dedicated game servers, productivity software, Linux and pretty much anything that I find interesting. Follow me in my transition from Windows to Linux for work and gaming .","title":"Welcome"},{"location":"blog/2021-01-15-terraria-dedicated-server/","tags":["Azure"],"text":"A guide on how to run your own dedicated Terraria server in Azure. Introduction \u00b6 Skill Level Required: Intermediate Firstly, if you have never heard of Terraria before, just do yourself a favour and buy a copy on Steam or GOG . Now, Terraria is a very fun game in single-player mode. But as with most games, it's much more fun to play it with friends. Now you might be asking yourself, why would I want to create my own dedicated server over just inviting my friends over Steam? Here are a few advantages of having a dedicated Terraria Server: Not everyone plays Terraria on Steam and Steam players cannot easily play with GOG players. Some people live in apartments with shared wifi and the router is not accessible for setting up port forwarding etc. Most people use wifi these days and if you host the game with your wifi network then everyone else will have additional latency. If one person is hosting the game and decides that they have had enough then no one else can play. If you want to change game hosts you need to manually copy the game world between people. Why would you want to set up your own private server over using a dedicated server platform that does all the work for you? Well, I live in South Africa and I couldn't find a dedicated server platform for this country and having the game hosted in the States will add too much latency You looking at $10-$30 per month, regardless of how much you and your friends are playing. I'd rather have a server that I pay per hour and can turn off when it's not needed. Getting Started \u00b6 You going to need the following for this tutorial: An Azure Account for hosting your dedicated server. An ssh client, I'm going to be using Snowflake but you can use Putty if you prefer. I just find Snowflake to be easier to use in general. A copy of Terraria on Steam or GOG Creating And Configuring An Azure Virtual Machine \u00b6 Creating Your First Ubuntu Virtual Machine \u00b6 Now I'm going to assume that you have created an Azure account and you have logged in. The first thing that you going to need to do is to create a Resource Group . Now a Resource Group is just a grouping of your VMs, storage volumes, virtual network interfaces that you have in your Azure account. To create a Resource Group simply click on the Resource Groups button. Next click on the Create button Now create a name for the Resource Group . I went for \"Terraria-LAN-RG\" and select a region nearby. Select the Review + create button, double-check your choices and if satisfied select the Create button. Now we open our newly created Resource Group Next, we want to create a Virtual Machine resource. We click on the Create button and we are going to select Ubuntu Server 20.04 LTS . Complete the form and make sure that you choose Standard B2 or any other option with at least 4GB of RAM for the Size and Password for Authentication Type . Make sure you create a nice strong password for the virtual machine. Keep the username and password handy as you are going to need them for the rest of this tutorial. Select the Next: Disks button Change the OS disk type to Standard HDD since we don't need fast disk speeds for a Terraria server. Select Review + create button, double-check your settings and select the Create button. You'll need to wait 2 minutes or so for Azure to create your virtual machine. Once the deployment is complete, select the Go to resource button Configuring Your Virtual Machine \u00b6 The first thing we are going to do is give our virtual machine a DNS name by clicking on the Configure link under Networking since IP addresses are much harder to remember Change the IP address assignment to Static and give the server any DNS name that you like, I called mine terraria-lan . Now click on the Save button. Go back to the Overview screen of your Virtual Machine . Take note of your Public IP address and DNS name as you'll need these later. Next, we need to go to Networking and open port 7777 (Terraria's default port) Select Add inbound port add button. Set the Destination port ranges to 7777 followed by the Add button. The last thing that you might want to change is the Auto-Shutdown under Operations in the side menu. Having the Auto Shutdown will save you money but make sure you select a time that you are unlikely to be mid-game. Running Your Server \u00b6 Now that your Virtual Machine is up and running. We need to do the following: Getting the server files from the Terraria website Transfer the server files to your new virtual machine Starting up the server Getting The Server Files \u00b6 Download the latest version of Terraria Server , at the time of writing it was a version 1.4.3.2 and extract it to somewhere convenient on your computer. I went with c:\\temp\\terraria-server-1432 Open the subfolder 1432\\Linux and it should look something like the screenshot below. Transfering The Server Files To Your Virtual Machine \u00b6 Fire up Snowflake . Add a New Connection . Create a New Site . Name - Any name you want to call it. I called my site Terraria-Server . Host - the DNS name that you captured earlier User - the username you created for your VM Password - the password you created for your VM Terraria Server files Click on the Connect button. You'll get a notification that looks something like this. Click on Yes In the Files section in SnowFlake . Change your path to the location where you extracted your Terraria Server files. Just drag and drop your files from your Windows machine (on the right) to your Azure Ubuntu Server on the left. Select Yes . Then select OK . This might take a minute or two to complete. Setting Up Your Server \u00b6 Next, go to the Terminal tab in SnowFlake . Now you can run any Linux command line commands here on your Ubuntu Virtual Machine. The first one we going to use is the ls command see confirm that we copied over all the files correctly. ls ## Expected output ## FNA.dll FNA.dll.config Terraria-min.png TerrariaServer TerrariaServer.bin.x86_64... If we can see all the files, we need to make the TerrariaServer.bin.x86_64 file executable. We do this with the chmod command below chmod +x TerrariaServer.bin.x86_64 Now we can start our server by running TerrariaServer.bin.x86_64 . Note the \"./\" prefix make sure you include that. ./TerrariaServer.bin.x86_64 Follow the prompts for creating your server Follow the prompts and if you see the following: Note: In future, you'll just need to run the command below to run your server. ./TerrariaServer.bin.x86_64 Connecting To Your New Server \u00b6 Now we start up Terraria . Select Multiplayer followed by Join via IP . Select/Create your Character. Note that Classic characters can only play in Classic worlds, same for Journeyman characters. Keep the default Port Fill in the Server password Keep an eye on the server terminal window for any errors and to see who cannot join and why. If all goes well you'll be in the game and your friends can join. Have fun!!!","title":"Creating A Dedicated Cloud Server For Terraria In Azure"},{"location":"blog/2021-01-15-terraria-dedicated-server/#introduction","text":"Skill Level Required: Intermediate Firstly, if you have never heard of Terraria before, just do yourself a favour and buy a copy on Steam or GOG . Now, Terraria is a very fun game in single-player mode. But as with most games, it's much more fun to play it with friends. Now you might be asking yourself, why would I want to create my own dedicated server over just inviting my friends over Steam? Here are a few advantages of having a dedicated Terraria Server: Not everyone plays Terraria on Steam and Steam players cannot easily play with GOG players. Some people live in apartments with shared wifi and the router is not accessible for setting up port forwarding etc. Most people use wifi these days and if you host the game with your wifi network then everyone else will have additional latency. If one person is hosting the game and decides that they have had enough then no one else can play. If you want to change game hosts you need to manually copy the game world between people. Why would you want to set up your own private server over using a dedicated server platform that does all the work for you? Well, I live in South Africa and I couldn't find a dedicated server platform for this country and having the game hosted in the States will add too much latency You looking at $10-$30 per month, regardless of how much you and your friends are playing. I'd rather have a server that I pay per hour and can turn off when it's not needed.","title":"Introduction"},{"location":"blog/2021-01-15-terraria-dedicated-server/#getting-started","text":"You going to need the following for this tutorial: An Azure Account for hosting your dedicated server. An ssh client, I'm going to be using Snowflake but you can use Putty if you prefer. I just find Snowflake to be easier to use in general. A copy of Terraria on Steam or GOG","title":"Getting Started"},{"location":"blog/2021-01-15-terraria-dedicated-server/#creating-and-configuring-an-azure-virtual-machine","text":"","title":"Creating And Configuring An Azure Virtual Machine"},{"location":"blog/2021-01-15-terraria-dedicated-server/#creating-your-first-ubuntu-virtual-machine","text":"Now I'm going to assume that you have created an Azure account and you have logged in. The first thing that you going to need to do is to create a Resource Group . Now a Resource Group is just a grouping of your VMs, storage volumes, virtual network interfaces that you have in your Azure account. To create a Resource Group simply click on the Resource Groups button. Next click on the Create button Now create a name for the Resource Group . I went for \"Terraria-LAN-RG\" and select a region nearby. Select the Review + create button, double-check your choices and if satisfied select the Create button. Now we open our newly created Resource Group Next, we want to create a Virtual Machine resource. We click on the Create button and we are going to select Ubuntu Server 20.04 LTS . Complete the form and make sure that you choose Standard B2 or any other option with at least 4GB of RAM for the Size and Password for Authentication Type . Make sure you create a nice strong password for the virtual machine. Keep the username and password handy as you are going to need them for the rest of this tutorial. Select the Next: Disks button Change the OS disk type to Standard HDD since we don't need fast disk speeds for a Terraria server. Select Review + create button, double-check your settings and select the Create button. You'll need to wait 2 minutes or so for Azure to create your virtual machine. Once the deployment is complete, select the Go to resource button","title":"Creating Your First Ubuntu Virtual Machine"},{"location":"blog/2021-01-15-terraria-dedicated-server/#configuring-your-virtual-machine","text":"The first thing we are going to do is give our virtual machine a DNS name by clicking on the Configure link under Networking since IP addresses are much harder to remember Change the IP address assignment to Static and give the server any DNS name that you like, I called mine terraria-lan . Now click on the Save button. Go back to the Overview screen of your Virtual Machine . Take note of your Public IP address and DNS name as you'll need these later. Next, we need to go to Networking and open port 7777 (Terraria's default port) Select Add inbound port add button. Set the Destination port ranges to 7777 followed by the Add button. The last thing that you might want to change is the Auto-Shutdown under Operations in the side menu. Having the Auto Shutdown will save you money but make sure you select a time that you are unlikely to be mid-game.","title":"Configuring Your Virtual Machine"},{"location":"blog/2021-01-15-terraria-dedicated-server/#running-your-server","text":"Now that your Virtual Machine is up and running. We need to do the following: Getting the server files from the Terraria website Transfer the server files to your new virtual machine Starting up the server","title":"Running Your Server"},{"location":"blog/2021-01-15-terraria-dedicated-server/#getting-the-server-files","text":"Download the latest version of Terraria Server , at the time of writing it was a version 1.4.3.2 and extract it to somewhere convenient on your computer. I went with c:\\temp\\terraria-server-1432 Open the subfolder 1432\\Linux and it should look something like the screenshot below.","title":"Getting The Server Files"},{"location":"blog/2021-01-15-terraria-dedicated-server/#transfering-the-server-files-to-your-virtual-machine","text":"Fire up Snowflake . Add a New Connection . Create a New Site . Name - Any name you want to call it. I called my site Terraria-Server . Host - the DNS name that you captured earlier User - the username you created for your VM Password - the password you created for your VM Terraria Server files Click on the Connect button. You'll get a notification that looks something like this. Click on Yes In the Files section in SnowFlake . Change your path to the location where you extracted your Terraria Server files. Just drag and drop your files from your Windows machine (on the right) to your Azure Ubuntu Server on the left. Select Yes . Then select OK . This might take a minute or two to complete.","title":"Transfering The Server Files To Your Virtual Machine"},{"location":"blog/2021-01-15-terraria-dedicated-server/#setting-up-your-server","text":"Next, go to the Terminal tab in SnowFlake . Now you can run any Linux command line commands here on your Ubuntu Virtual Machine. The first one we going to use is the ls command see confirm that we copied over all the files correctly. ls ## Expected output ## FNA.dll FNA.dll.config Terraria-min.png TerrariaServer TerrariaServer.bin.x86_64... If we can see all the files, we need to make the TerrariaServer.bin.x86_64 file executable. We do this with the chmod command below chmod +x TerrariaServer.bin.x86_64 Now we can start our server by running TerrariaServer.bin.x86_64 . Note the \"./\" prefix make sure you include that. ./TerrariaServer.bin.x86_64 Follow the prompts for creating your server Follow the prompts and if you see the following: Note: In future, you'll just need to run the command below to run your server. ./TerrariaServer.bin.x86_64","title":"Setting Up Your Server"},{"location":"blog/2021-01-15-terraria-dedicated-server/#connecting-to-your-new-server","text":"Now we start up Terraria . Select Multiplayer followed by Join via IP . Select/Create your Character. Note that Classic characters can only play in Classic worlds, same for Journeyman characters. Keep the default Port Fill in the Server password Keep an eye on the server terminal window for any errors and to see who cannot join and why. If all goes well you'll be in the game and your friends can join. Have fun!!!","title":"Connecting To Your New Server"},{"location":"blog/2021-01-27-manictime/","tags":["Performance"],"text":"A guide on how to save time in capturing timesheets with the assistance of ManicTime Introduction \u00b6 Skill level required: Beginner Consider these questions: Did I start start my day at 7:30 AM or 7:45 AM? Did I spend 15 minutes or 45 minutes looking at a support ticket? How long was I out for my lunch break? Am I working too many hours or too few hours? When I forget to complete my timesheet every day, how do I figure out what I did? If you answered yes to any of the above questions, and you work on a computer most of the day, then ManicTime is there to answer all of the above questions. ManicTime Basics \u00b6 In a nutshell, all that ManicTime does is track the duration and time that each window is focused for. So if you answer a call in Teams, reply to emails or get some development work done you can figure out everything that happened after it's happened and you no longer have to guess. Let us break the UI down into its pieces: The first row is custom Tags and comments for each task that you've performed for the day. More on this later. The next row is Computer Usage which measures Active (working on the computer) vs Inactive time (e.g. when your computer is locked or you step away for 10 minutes or more). The Applications tab shows the focused window throughout the whole day The Documents tab shows the name of the currently opened browser window or the current file open in a program like Visual Studio or VSCode. If you click on any tab, the reporting information changes to that tab. e.g. if I select the Applications tab I can now see how long each window was focused for. Now where the superpowers come in with this tool is one can filter on the results to get an idea of when they started and ended a task. e.g. I'm going to filter on \"manictime.md\" I can see when I started writing this blog post Then I can just highlight and tag the time. First, we type in the project we want to assign the time to, in this case, \" Blog\" and add a note of what you were doing. You can also easily drag and drop the start and end times for each tag. Finally, I can can then use the details in the captured tags for completing my timesheet for the day. ManicTime Professional Edition \u00b6 These are are the core features of ManicTime and all included in the free version. I haven't needed the professional version of the tool but it does have some enticing features such as: Periodic screenshots (every 60 seconds by default) which help you guess what you were busy with at that time. A reminder to capture what you did in the past x number of minutes. Automatic time tagging using custom rules. A whole client/server system for working with a team. Conclusion \u00b6 Even the free edition of ManicTime is very useful. You know exactly when you started; how long your lunch break was etc... answering all of the questions we started with. When you get to the end of the day, you know exactly what you did, and timesheets become a breeze. What are you waiting for? Give ManicTime a try.","title":"Taming Your Timesheet With ManicTime"},{"location":"blog/2021-01-27-manictime/#introduction","text":"Skill level required: Beginner Consider these questions: Did I start start my day at 7:30 AM or 7:45 AM? Did I spend 15 minutes or 45 minutes looking at a support ticket? How long was I out for my lunch break? Am I working too many hours or too few hours? When I forget to complete my timesheet every day, how do I figure out what I did? If you answered yes to any of the above questions, and you work on a computer most of the day, then ManicTime is there to answer all of the above questions.","title":"Introduction"},{"location":"blog/2021-01-27-manictime/#manictime-basics","text":"In a nutshell, all that ManicTime does is track the duration and time that each window is focused for. So if you answer a call in Teams, reply to emails or get some development work done you can figure out everything that happened after it's happened and you no longer have to guess. Let us break the UI down into its pieces: The first row is custom Tags and comments for each task that you've performed for the day. More on this later. The next row is Computer Usage which measures Active (working on the computer) vs Inactive time (e.g. when your computer is locked or you step away for 10 minutes or more). The Applications tab shows the focused window throughout the whole day The Documents tab shows the name of the currently opened browser window or the current file open in a program like Visual Studio or VSCode. If you click on any tab, the reporting information changes to that tab. e.g. if I select the Applications tab I can now see how long each window was focused for. Now where the superpowers come in with this tool is one can filter on the results to get an idea of when they started and ended a task. e.g. I'm going to filter on \"manictime.md\" I can see when I started writing this blog post Then I can just highlight and tag the time. First, we type in the project we want to assign the time to, in this case, \" Blog\" and add a note of what you were doing. You can also easily drag and drop the start and end times for each tag. Finally, I can can then use the details in the captured tags for completing my timesheet for the day.","title":"ManicTime Basics"},{"location":"blog/2021-01-27-manictime/#manictime-professional-edition","text":"These are are the core features of ManicTime and all included in the free version. I haven't needed the professional version of the tool but it does have some enticing features such as: Periodic screenshots (every 60 seconds by default) which help you guess what you were busy with at that time. A reminder to capture what you did in the past x number of minutes. Automatic time tagging using custom rules. A whole client/server system for working with a team.","title":"ManicTime Professional Edition"},{"location":"blog/2021-01-27-manictime/#conclusion","text":"Even the free edition of ManicTime is very useful. You know exactly when you started; how long your lunch break was etc... answering all of the questions we started with. When you get to the end of the day, you know exactly what you did, and timesheets become a breeze. What are you waiting for? Give ManicTime a try.","title":"Conclusion"},{"location":"blog/2022-11-23-windows-to-linux/","tags":["Linux","Pos_OS"],"text":"This is the start of a blog series about my journey from being a dedicated Windows fan to a Linux user, specifically Pop!_OS. Here I'll be sharing the hurdles and complications I encountered and my solutions to those complications. I am now using Linux for my gaming machine and my work laptop. I hope that reading about my journey will help smoothen your journey into the world of Linux! Introduction \u00b6 Skill level required: Intermediate Before you even consider Linux as a solution to your computing needs you need to ask yourself why. Why would you like to switch over to Linux? Here are some excellent reasons to try Linux: You want to learn something new You enjoy tinkering You cannot afford a new computer and your current machine is getting slower every day. Your computer is getting quite old and your current Windows installation is no longer supported You don't like the new built-in telemetry ads in Windows You cannot upgrade to Windows 11 Reasons not to switch to Linux: You are not technical (Installing and setting up Linux is not for computer novices). Also, you WILL encounter issues that will require googling and figuring out. You have specific software that you HAVE to use and this software isn't available for Linux. e.g. Photoshop, Microsoft Office, Adobe Premiere, etc... You expect everything to be free on Linux. You'll be surprised just how much commercial software is available on Linux. There is some excellent free software available out there but sometimes the retail options are significantly better. Trying Out Linux \u00b6 Before you decide to install Linux remember that you can try Linux first as most Linux distributions have what is known as a Live Distro or Live CD. So you can test if Linux works on your hardware and see what software works for you before taking the plunge and installing it. When it comes to trying out and installing other operating systems. I would recommend that you use the tool called Ventoy . Ventoy allows you to boot an operating system by just copying the ISO file of the operating system onto a bootable flash drive. It even works for Windows 10 and 11. Next, have a look at Distrowatch and a look to see which of the top 5 distros you like the most. I selected POP!_OS because I had heard about it quite a bit of YouTube, and it seemed to be beginner-friendly. Linux Mint is another good option but for the rest of my guide I'll be assuming that you are using POP!_OS . Install Ventoy and download the ISOs of the Linux distros that you would like to try. Then simply reboot your computer, enter into your boot menu and boot Linux to try it. The main things you want to see are the following: Do you like the look and feel of the system? Does all your hardware work: i.e. test your ethernet and Wi-Fi connectivity, test that your sound works. Confirm that the software that you want to use on the system is available on your selected distro Cross-Platform Software \u00b6 I would recommend that you switch over to using cross-platform software whenever possible as this will make your transition over to Linux much simpler. So for example instead of using Microsoft Office, either make sure that you're using the web version of the office suite or make sure that you are using Libre-office Forcing yourself to use the software that you are going to use in your future Linux system will make the transition much more seamless. Here are some Windows/Mac-only tools with some cross-platform suggestions to use instead: Microsoft Office - Web version of the Microsoft Office Suite, Google Suite or Libre-Office Paint.NET - Pinta (note that I'm not going to recommend GIMP as it is very complicated to use) Adobe Premiere - DaVinci Resolve Visual Studio - VsCode or JetBrains Tool Suite Microsoft Teams - Web version of Microsoft Teams Outlook - Web version of Outlook SQL Server Management Studio - Azure Data Studio and JetBrains DataGrip Ableton Live - Bitwig or Ardour If there is software that you cannot find an appropriate cross-platform alternative. Then I'm afraid Linux is probably not for you. But before you give up though, have a look at Codeweavers Crossover . This tool is a compatibility layer for running Windows-specific software on Linux (or Mac). Alternatively, you could go with the free option of Wine to run your Windows-specific tools on Linux. Personally, I've had very limited success with this route. What Is Next \u00b6 The first thing I did in Linux was something unusual. I switched to Pop!_OS on my gaming PC. Just a few years ago gaming on Linux was really difficult to do, but this is no longer the case. We'll be looking at installing Steam and gaming on Pop!_OS next.","title":"Ditching Windows and Switching to Linux"},{"location":"blog/2022-11-23-windows-to-linux/#introduction","text":"Skill level required: Intermediate Before you even consider Linux as a solution to your computing needs you need to ask yourself why. Why would you like to switch over to Linux? Here are some excellent reasons to try Linux: You want to learn something new You enjoy tinkering You cannot afford a new computer and your current machine is getting slower every day. Your computer is getting quite old and your current Windows installation is no longer supported You don't like the new built-in telemetry ads in Windows You cannot upgrade to Windows 11 Reasons not to switch to Linux: You are not technical (Installing and setting up Linux is not for computer novices). Also, you WILL encounter issues that will require googling and figuring out. You have specific software that you HAVE to use and this software isn't available for Linux. e.g. Photoshop, Microsoft Office, Adobe Premiere, etc... You expect everything to be free on Linux. You'll be surprised just how much commercial software is available on Linux. There is some excellent free software available out there but sometimes the retail options are significantly better.","title":"Introduction"},{"location":"blog/2022-11-23-windows-to-linux/#trying-out-linux","text":"Before you decide to install Linux remember that you can try Linux first as most Linux distributions have what is known as a Live Distro or Live CD. So you can test if Linux works on your hardware and see what software works for you before taking the plunge and installing it. When it comes to trying out and installing other operating systems. I would recommend that you use the tool called Ventoy . Ventoy allows you to boot an operating system by just copying the ISO file of the operating system onto a bootable flash drive. It even works for Windows 10 and 11. Next, have a look at Distrowatch and a look to see which of the top 5 distros you like the most. I selected POP!_OS because I had heard about it quite a bit of YouTube, and it seemed to be beginner-friendly. Linux Mint is another good option but for the rest of my guide I'll be assuming that you are using POP!_OS . Install Ventoy and download the ISOs of the Linux distros that you would like to try. Then simply reboot your computer, enter into your boot menu and boot Linux to try it. The main things you want to see are the following: Do you like the look and feel of the system? Does all your hardware work: i.e. test your ethernet and Wi-Fi connectivity, test that your sound works. Confirm that the software that you want to use on the system is available on your selected distro","title":"Trying Out Linux"},{"location":"blog/2022-11-23-windows-to-linux/#cross-platform-software","text":"I would recommend that you switch over to using cross-platform software whenever possible as this will make your transition over to Linux much simpler. So for example instead of using Microsoft Office, either make sure that you're using the web version of the office suite or make sure that you are using Libre-office Forcing yourself to use the software that you are going to use in your future Linux system will make the transition much more seamless. Here are some Windows/Mac-only tools with some cross-platform suggestions to use instead: Microsoft Office - Web version of the Microsoft Office Suite, Google Suite or Libre-Office Paint.NET - Pinta (note that I'm not going to recommend GIMP as it is very complicated to use) Adobe Premiere - DaVinci Resolve Visual Studio - VsCode or JetBrains Tool Suite Microsoft Teams - Web version of Microsoft Teams Outlook - Web version of Outlook SQL Server Management Studio - Azure Data Studio and JetBrains DataGrip Ableton Live - Bitwig or Ardour If there is software that you cannot find an appropriate cross-platform alternative. Then I'm afraid Linux is probably not for you. But before you give up though, have a look at Codeweavers Crossover . This tool is a compatibility layer for running Windows-specific software on Linux (or Mac). Alternatively, you could go with the free option of Wine to run your Windows-specific tools on Linux. Personally, I've had very limited success with this route.","title":"Cross-Platform Software"},{"location":"blog/2022-11-23-windows-to-linux/#what-is-next","text":"The first thing I did in Linux was something unusual. I switched to Pop!_OS on my gaming PC. Just a few years ago gaming on Linux was really difficult to do, but this is no longer the case. We'll be looking at installing Steam and gaming on Pop!_OS next.","title":"What Is Next"},{"location":"blog/2022-12-03-gaming-steam/","tags":["Linux","Pos_OS","Gaming"],"text":"If you love PC gaming, I'm going to guess that you game using Steam for your gaming fix. Fortunately, Steam runs really well on Linux. With a few tricks you should be able to play almost all your games in your Steam library. Introduction \u00b6 Skill level required: Intermediate Here I'm going to assume that you've installed POP!_OS . If you haven't followed the guide for installing POP!_OS on their website https://support.system76.com/articles/install-pop . The only things I would change in the guide is: Using Ventoy for the boot media rather than Etcher. Mostly, because I use Ventoy for trying out multiple distros from a single flash drive, so it's already available as an installation media. If you're creating a gaming pc/laptop you might not want your hard drive encrypted as this will slow down your game loading times a little. So when you get to the Drive Encryption section in the installer select the Don't Encrypt option. Once you have POP!_OS installed, we'll have a look at installing Steam and getting your game library running. Installing Steam \u00b6 Now that you have a freshly installed machine, don't install Steam using the Pop!_Shop as this will install the Steam flatpak which didn't let me easily store my games on another disk. Visit Steam's website https://store.steampowered.com and click on the Install Steam button. You should get a steam_latest.deb file in your Downloads folder. You can think of a .deb file as a .exe or .msi installer file for Pop!_OS (any distro derived from Debian actually). Double-click on the steam_latest.deb file, and it will open in Eddy (the Pop!_OS .deb installer tool). Simply click on the Install button, and it will start the installation for Steam . Enabling Steam Play \u00b6 Now that I had Steam installed, you can just launch Steam using the application launcher (by pressing the Windows Key ). On my first launch of Steam, I was disappointed to see that my game library had shrunk down to around \u00bc of titles that were available on Windows. After some googling I discovered that you need to enable something called \"Steam Play\" for your games to run on Linux. Fortunately, this was a simple thing to fix. Open Steam >> Settings >> Steam Play Now, you want to tick two options Enable Steam Play for supported titles and Enable Steam Play for all other titles Once you click on OK , you'll be prompted to restart Steam. Installing Proton Glorious Eggroll \u00b6 Now, I could see my entire game library in Steam on Linux. Like, many other people, the first thing I did was launch Skyrim and I soon discovered that I had no sound in the game and had some other weird glitches. There is one more piece of the puzzle that you need to be able to play 99% of your library and that is Proton Glorious Eggroll (Proton GE for short). This tool is a heavily tweaked version of Proton which Steam uses for Steam Play. To download it, navigate to https://github.com/GloriousEggroll/proton-ge-custom Grab the latest release of Proton GE Download the latest binaries (not the source code) Double-click on the GE-Proton7-41.tar.gz file in your Downloads folder. Click on the Extract button in the top left. Select your Home folder Now what no one tells you is that you need to press Ctrl+H to show hidden folders (any folder or file with a dot in-front of the name is a hidden folder). Then select .steam >> steam . Now create a new folder called compatibilitytools.d . You can add additional folders by \"Create Folder\" icon just below the Extract button. Your screen should look as follows when you are ready to extract Proton GE by clicking on the Extract button. If you open your file manager and navigate to your new GE-Proton7-41 folder and your screen looks as follows, you are on the right track Next, restart Steam and open the properties of any game. Select the Compatibility tab. Tick the Force the use of a specific Steam Play compatibility tool . Then select GE-Proton7-41 . Launch your game and if you are lucky, 99% of the time the game will launch and play without issues. Tips \u00b6 If you are using a gaming laptop, most gaming laptops have hybrid graphics. For the best gaming experience you going to want to select the dedicated graphics card option in your power settings. If you are struggling to get a game to work, have a look at ProtonDB https://www.protondb.com and see if other's have managed to play the game on Linux and what tweaks were needed to play the game. Q/A \u00b6 Why didn't you just use the flatpak for Steam in the Pop!_Shop? Working with Steam games that you want to have installed on another drive is much harder and requires creating linked folders etc. Why are my games not working when I'm sharing a common game library with Windows on another drive? Steam Play does not work correctly with ntfs formatted drives. My game is immediately crashing on launch? Same as above, have a look at ProtonDB and see what others needed to do to get the game working. Do you know that you could have completed your whole guide by using 4 lines of bash script? Yes, I am aware of this but this post is intended to teach rather than just get to the end goal. Why are you calling the OS Linux don't you know that Linux is just a kernel, and it's actually GNU/Linux? I am aware of that.","title":"Gaming on Pop_OS! with Steam"},{"location":"blog/2022-12-03-gaming-steam/#introduction","text":"Skill level required: Intermediate Here I'm going to assume that you've installed POP!_OS . If you haven't followed the guide for installing POP!_OS on their website https://support.system76.com/articles/install-pop . The only things I would change in the guide is: Using Ventoy for the boot media rather than Etcher. Mostly, because I use Ventoy for trying out multiple distros from a single flash drive, so it's already available as an installation media. If you're creating a gaming pc/laptop you might not want your hard drive encrypted as this will slow down your game loading times a little. So when you get to the Drive Encryption section in the installer select the Don't Encrypt option. Once you have POP!_OS installed, we'll have a look at installing Steam and getting your game library running.","title":"Introduction"},{"location":"blog/2022-12-03-gaming-steam/#installing-steam","text":"Now that you have a freshly installed machine, don't install Steam using the Pop!_Shop as this will install the Steam flatpak which didn't let me easily store my games on another disk. Visit Steam's website https://store.steampowered.com and click on the Install Steam button. You should get a steam_latest.deb file in your Downloads folder. You can think of a .deb file as a .exe or .msi installer file for Pop!_OS (any distro derived from Debian actually). Double-click on the steam_latest.deb file, and it will open in Eddy (the Pop!_OS .deb installer tool). Simply click on the Install button, and it will start the installation for Steam .","title":"Installing Steam"},{"location":"blog/2022-12-03-gaming-steam/#enabling-steam-play","text":"Now that I had Steam installed, you can just launch Steam using the application launcher (by pressing the Windows Key ). On my first launch of Steam, I was disappointed to see that my game library had shrunk down to around \u00bc of titles that were available on Windows. After some googling I discovered that you need to enable something called \"Steam Play\" for your games to run on Linux. Fortunately, this was a simple thing to fix. Open Steam >> Settings >> Steam Play Now, you want to tick two options Enable Steam Play for supported titles and Enable Steam Play for all other titles Once you click on OK , you'll be prompted to restart Steam.","title":"Enabling Steam Play"},{"location":"blog/2022-12-03-gaming-steam/#installing-proton-glorious-eggroll","text":"Now, I could see my entire game library in Steam on Linux. Like, many other people, the first thing I did was launch Skyrim and I soon discovered that I had no sound in the game and had some other weird glitches. There is one more piece of the puzzle that you need to be able to play 99% of your library and that is Proton Glorious Eggroll (Proton GE for short). This tool is a heavily tweaked version of Proton which Steam uses for Steam Play. To download it, navigate to https://github.com/GloriousEggroll/proton-ge-custom Grab the latest release of Proton GE Download the latest binaries (not the source code) Double-click on the GE-Proton7-41.tar.gz file in your Downloads folder. Click on the Extract button in the top left. Select your Home folder Now what no one tells you is that you need to press Ctrl+H to show hidden folders (any folder or file with a dot in-front of the name is a hidden folder). Then select .steam >> steam . Now create a new folder called compatibilitytools.d . You can add additional folders by \"Create Folder\" icon just below the Extract button. Your screen should look as follows when you are ready to extract Proton GE by clicking on the Extract button. If you open your file manager and navigate to your new GE-Proton7-41 folder and your screen looks as follows, you are on the right track Next, restart Steam and open the properties of any game. Select the Compatibility tab. Tick the Force the use of a specific Steam Play compatibility tool . Then select GE-Proton7-41 . Launch your game and if you are lucky, 99% of the time the game will launch and play without issues.","title":"Installing Proton Glorious Eggroll"},{"location":"blog/2022-12-03-gaming-steam/#tips","text":"If you are using a gaming laptop, most gaming laptops have hybrid graphics. For the best gaming experience you going to want to select the dedicated graphics card option in your power settings. If you are struggling to get a game to work, have a look at ProtonDB https://www.protondb.com and see if other's have managed to play the game on Linux and what tweaks were needed to play the game.","title":"Tips"},{"location":"blog/2022-12-03-gaming-steam/#qa","text":"Why didn't you just use the flatpak for Steam in the Pop!_Shop? Working with Steam games that you want to have installed on another drive is much harder and requires creating linked folders etc. Why are my games not working when I'm sharing a common game library with Windows on another drive? Steam Play does not work correctly with ntfs formatted drives. My game is immediately crashing on launch? Same as above, have a look at ProtonDB and see what others needed to do to get the game working. Do you know that you could have completed your whole guide by using 4 lines of bash script? Yes, I am aware of this but this post is intended to teach rather than just get to the end goal. Why are you calling the OS Linux don't you know that Linux is just a kernel, and it's actually GNU/Linux? I am aware of that.","title":"Q/A"},{"location":"blog/2022-12-10-popos-vs-vpn/","tags":["Linux","Pos_OS","Gaming"],"text":"Being able to securely connect to an office or client network is something a typical software developer or server administrator has to do daily. VPNs are usually rather complicated and seem to be more complicated on Linux than Windows. However, that might just be because I have used Windows for a longer time. In this guide, we'll be looking at working with VPNs and some annoying challenges along the way. Introduction \u00b6 Skill level required: Advanced Working with VPNs on Pop!_OS and Linux, in general, has been my greatest challenge so far for adopting the Operating System for daily use. Getting VPNs working took a lot of reading and tinkering. Hopefully, this guide will help you get your VPN needs set up and running much quicker. That being said, if you are not comfortable using the Terminal in Windows, I would recommend that you give this guide a skip. We'll start off by installing an open-source VPN software called OpenConnect . Installing OpenConnect \u00b6 On Windows, you often need to install multiple VPN software. However, on Linux, there is one that works particularly well for several VPNs. Introducing OpenConnect . OpenConnect understands the following VPN protocols and can connect to any of the below VPNs: Cisco AnyConnect SSL VPN Juniper Network Connect Palo Alto Networks (PAN) GlobalProtect SSL VPN Pulse Connect Secure SSL VPN F5 BIG-IP SSL VPN FortiGate SSL VPN Array Networks SSL VPN This works perfectly for me as I typically use FortiGate and Cisco AnyConnect for 90% of the VPNs, I connect to. To install it, just open the Terminal using the launcher or by pressing WINDOWS_KEY+T sudo apt update sudo apt install -y openconnect The sudo command tells the terminal to run the rest of the command that follows as a full Administrator . APT stands for Advanced Package Tool and is often the simplest way of installing software on Debian-based distros like Pop!_OS. Note that when you are prompted to fill in your password for your user, there is no indication that you are typing anything (i.e. there are no *s shown as you type your password). Once you enter the right password just press the Enter as usual and APT will install the software for you. Using OpenConnect \u00b6 If you wanted to connect to say a FortiGate vpn you will run a terminal command that looks something like this (remember to replace your-vpn-username and remote.officedomain.com with your information): sudo openconnect \\ --user=your-vpn-username \\ --protocol=fortinet \\ --server=remote.officedomain.com:10443 When you try and connect you'll typically get an error that looks as follows: \"Certificate from VPN server \"x\" failed verification.\" This is because 99% of VPN solutions seem to use self-signed certificates. Fortunately, you can just copy the line indicated below and add that to the terminal command that you are using. E.g. the command that you would use for connecting to the vpn would look something like this in the end. sudo openconnect \\ --user=your-vpn-username \\ --protocol=fortinet \\ --server=remote.officedomain.com:10443 \\ --servercert pin-sha256:a+b/c+dg= Next, you'll be prompted for your password and then potentially for your MFA token (if that is enabled). If all goes well, you are now connected to your work VPN. And you are done? Well not quite, you see VPN software does not seem to play nicely with systemd-resolved . Domain Name Resolution not working for VPN connections \u00b6 Soon after connecting to the VPN, I discovered that I could not use the DNS name for any servers on my work network, however, the IP address would resolve. E.g. if I have a DNS name test.officedomain.local with IP address 192.168.3.200 If I ping test.officedomain.local (while on the VPN) I get Temporary failure in name resolution ping test.officedomain.local # ping: test.officedomain.local: Temporary failure in name resolution However, I can ping the IP address, I can connect just perfectly. e.g. ping 192.168.3.200 # 64 bytes from 192.168.3.200: icmp_seq=1 ttl=118 time=7.65 ms # 64 bytes from 192.168.3.200: icmp_seq=2 ttl=118 time=5.13 ms Culprit systemd-resolved \u00b6 It looks like the VPN software does not play nicely with systemd-resolved . This service is a name resolution manager, that runs on many Linux distributions. It acts as a service for applications and resolves DNS queries. From what I have read, many Linux system admins are not that fond of it in the slightest. Turning off systemd-resolved \u00b6 WARNING!!! you can break your networking in your system if you get any of these steps wrong. My resolution was to turn it off and switch back to using plain Network Manager (the the old way of networking in Linux). First, we are going to edit the /etc/NetworkManager/NetworkManager.conf file and enable dns resolution for the old network manager. sudo gedit /etc/NetworkManager/NetworkManager.conf Then put the following line in the [main] section dns=default Your file should look as follows, once you are happy with the file changes Save and close the file. Now let us turn off the systemd-resolved service, fix the bad symbolic link for /etc/resolv.conf and restart the network manager. sudo systemctl disable systemd-resolved sudo systemctl stop systemd-resolved sudo systemctl restart NetworkManager Now we need to reconfigure the old resolveconf package. sudo rm /etc/resolv.conf sudo dpkg-reconfigure resolvconf On this screen press TAB to highlight the OK button and press ENTER . Now you'll get this screen, just hit ENTER again. On this screen press TAB to highlight the OK button and press ENTER . Reboot your machine. Now when you connect to your VPN you should be able to use the domain name rather than the IP address because when your VPN software writes its entries into the /etc/resolv.conf file. RDP with Remmina \u00b6 Remmina is your Linux alternative to Windows Remote Desktop. To install Remmina , you are just going to use the following Terminal command. sudo apt update sudo apt install -y remmina Now open Remmina from your application launcher. Fill in the name of the server you want to RDP and press Enter. Note that Remmina can also support the VNC and SSH protocols. Conclusion \u00b6 As you may have noticed working with VPNs in Pop!_OS is rather challenging. Fortunately, you can use one VPN application for connecting to virtually any VPN protocol. What is Next \u00b6 Now that we have VPNs and RDP working. The next issue I encountered was trying to copy files over my RDP sessions. I didn't come right with this, but found a work-around using the samba protocol. We'll be looking at this next.","title":"2022 12 10 popos vs vpn"},{"location":"blog/2022-12-10-popos-vs-vpn/#introduction","text":"Skill level required: Advanced Working with VPNs on Pop!_OS and Linux, in general, has been my greatest challenge so far for adopting the Operating System for daily use. Getting VPNs working took a lot of reading and tinkering. Hopefully, this guide will help you get your VPN needs set up and running much quicker. That being said, if you are not comfortable using the Terminal in Windows, I would recommend that you give this guide a skip. We'll start off by installing an open-source VPN software called OpenConnect .","title":"Introduction"},{"location":"blog/2022-12-10-popos-vs-vpn/#installing-openconnect","text":"On Windows, you often need to install multiple VPN software. However, on Linux, there is one that works particularly well for several VPNs. Introducing OpenConnect . OpenConnect understands the following VPN protocols and can connect to any of the below VPNs: Cisco AnyConnect SSL VPN Juniper Network Connect Palo Alto Networks (PAN) GlobalProtect SSL VPN Pulse Connect Secure SSL VPN F5 BIG-IP SSL VPN FortiGate SSL VPN Array Networks SSL VPN This works perfectly for me as I typically use FortiGate and Cisco AnyConnect for 90% of the VPNs, I connect to. To install it, just open the Terminal using the launcher or by pressing WINDOWS_KEY+T sudo apt update sudo apt install -y openconnect The sudo command tells the terminal to run the rest of the command that follows as a full Administrator . APT stands for Advanced Package Tool and is often the simplest way of installing software on Debian-based distros like Pop!_OS. Note that when you are prompted to fill in your password for your user, there is no indication that you are typing anything (i.e. there are no *s shown as you type your password). Once you enter the right password just press the Enter as usual and APT will install the software for you.","title":"Installing OpenConnect"},{"location":"blog/2022-12-10-popos-vs-vpn/#using-openconnect","text":"If you wanted to connect to say a FortiGate vpn you will run a terminal command that looks something like this (remember to replace your-vpn-username and remote.officedomain.com with your information): sudo openconnect \\ --user=your-vpn-username \\ --protocol=fortinet \\ --server=remote.officedomain.com:10443 When you try and connect you'll typically get an error that looks as follows: \"Certificate from VPN server \"x\" failed verification.\" This is because 99% of VPN solutions seem to use self-signed certificates. Fortunately, you can just copy the line indicated below and add that to the terminal command that you are using. E.g. the command that you would use for connecting to the vpn would look something like this in the end. sudo openconnect \\ --user=your-vpn-username \\ --protocol=fortinet \\ --server=remote.officedomain.com:10443 \\ --servercert pin-sha256:a+b/c+dg= Next, you'll be prompted for your password and then potentially for your MFA token (if that is enabled). If all goes well, you are now connected to your work VPN. And you are done? Well not quite, you see VPN software does not seem to play nicely with systemd-resolved .","title":"Using OpenConnect"},{"location":"blog/2022-12-10-popos-vs-vpn/#domain-name-resolution-not-working-for-vpn-connections","text":"Soon after connecting to the VPN, I discovered that I could not use the DNS name for any servers on my work network, however, the IP address would resolve. E.g. if I have a DNS name test.officedomain.local with IP address 192.168.3.200 If I ping test.officedomain.local (while on the VPN) I get Temporary failure in name resolution ping test.officedomain.local # ping: test.officedomain.local: Temporary failure in name resolution However, I can ping the IP address, I can connect just perfectly. e.g. ping 192.168.3.200 # 64 bytes from 192.168.3.200: icmp_seq=1 ttl=118 time=7.65 ms # 64 bytes from 192.168.3.200: icmp_seq=2 ttl=118 time=5.13 ms","title":"Domain Name Resolution not working for VPN connections"},{"location":"blog/2022-12-10-popos-vs-vpn/#culprit-systemd-resolved","text":"It looks like the VPN software does not play nicely with systemd-resolved . This service is a name resolution manager, that runs on many Linux distributions. It acts as a service for applications and resolves DNS queries. From what I have read, many Linux system admins are not that fond of it in the slightest.","title":"Culprit systemd-resolved"},{"location":"blog/2022-12-10-popos-vs-vpn/#turning-off-systemd-resolved","text":"WARNING!!! you can break your networking in your system if you get any of these steps wrong. My resolution was to turn it off and switch back to using plain Network Manager (the the old way of networking in Linux). First, we are going to edit the /etc/NetworkManager/NetworkManager.conf file and enable dns resolution for the old network manager. sudo gedit /etc/NetworkManager/NetworkManager.conf Then put the following line in the [main] section dns=default Your file should look as follows, once you are happy with the file changes Save and close the file. Now let us turn off the systemd-resolved service, fix the bad symbolic link for /etc/resolv.conf and restart the network manager. sudo systemctl disable systemd-resolved sudo systemctl stop systemd-resolved sudo systemctl restart NetworkManager Now we need to reconfigure the old resolveconf package. sudo rm /etc/resolv.conf sudo dpkg-reconfigure resolvconf On this screen press TAB to highlight the OK button and press ENTER . Now you'll get this screen, just hit ENTER again. On this screen press TAB to highlight the OK button and press ENTER . Reboot your machine. Now when you connect to your VPN you should be able to use the domain name rather than the IP address because when your VPN software writes its entries into the /etc/resolv.conf file.","title":"Turning off systemd-resolved"},{"location":"blog/2022-12-10-popos-vs-vpn/#rdp-with-remmina","text":"Remmina is your Linux alternative to Windows Remote Desktop. To install Remmina , you are just going to use the following Terminal command. sudo apt update sudo apt install -y remmina Now open Remmina from your application launcher. Fill in the name of the server you want to RDP and press Enter. Note that Remmina can also support the VNC and SSH protocols.","title":"RDP with Remmina"},{"location":"blog/2022-12-10-popos-vs-vpn/#conclusion","text":"As you may have noticed working with VPNs in Pop!_OS is rather challenging. Fortunately, you can use one VPN application for connecting to virtually any VPN protocol.","title":"Conclusion"},{"location":"blog/2022-12-10-popos-vs-vpn/#what-is-next","text":"Now that we have VPNs and RDP working. The next issue I encountered was trying to copy files over my RDP sessions. I didn't come right with this, but found a work-around using the samba protocol. We'll be looking at this next.","title":"What is Next"},{"location":"blog/2022-12-21-samba/","tags":["Linux","Pos_OS"],"text":"In my last blog post I managed to get VPNs and RDP working in Pop!_OS (see The Battle Between Pop!_OS & VPN Software if you missed it). Now my next challenge was to actually copy files over from my local machine over to a remote machine. Introduction \u00b6 Required skill level: Beginner If I needed to copy files to a remote server, I would normally use one of the following methods: Open the server in the Remote Desktop Connection tool and simply copy the files. Enable Local Resources in the Remote Desktop Connection tool and copy the files from my machine from the remote machine. Use the file sharing functionality built into Windows Explorer i.e. type \\\\remote-computer-name.domain\\c$ in the address bar At the moment, I have only managed to get method 3 to work in Pop!_OS . Here we will use the SMB protocol. The Solution: Samba \u00b6 Samba is a free and open-source software suite that provides file and print services for computers on a network. Samba uses the Server Message Block (SMB) protocol, which is a networking protocol used by Windows-based computers to share resources such as files and printers. Samba is primarily used in environments where there are both Windows and Linux/Unix computers, allowing the computers to seamlessly share resources and communicate with each other. It is often used in small and medium-sized business networks and home networks where there are both Windows and Linux/Unix computers. How to use Samba \u00b6 Open Files (the file manager for Pop!_OS ). Click on the + Other Locations button and then type the following in the Enter server address... field: smb://remote-computer-name.domain/c$ Note: You will need to change the placeholder above to the actual server that you are connecting to. You may notice that all we've done is replace the forward slashes with backslashes and add smb as a prefix but that's all there is to it. Once you click on Connect you'll be asked to enter your Windows credentials Now you can create and copy files to and from your remote server as if you were working with your local file system. Conclusion \u00b6 Copying files from and to a remote server is easy using the using the SMB protocol. However, I would much prefer to be able to insert the files directly via an RDP session, but that will only be possible if I can find out how to do it.","title":"2022 12 21 samba"},{"location":"blog/2022-12-21-samba/#introduction","text":"Required skill level: Beginner If I needed to copy files to a remote server, I would normally use one of the following methods: Open the server in the Remote Desktop Connection tool and simply copy the files. Enable Local Resources in the Remote Desktop Connection tool and copy the files from my machine from the remote machine. Use the file sharing functionality built into Windows Explorer i.e. type \\\\remote-computer-name.domain\\c$ in the address bar At the moment, I have only managed to get method 3 to work in Pop!_OS . Here we will use the SMB protocol.","title":"Introduction"},{"location":"blog/2022-12-21-samba/#the-solution-samba","text":"Samba is a free and open-source software suite that provides file and print services for computers on a network. Samba uses the Server Message Block (SMB) protocol, which is a networking protocol used by Windows-based computers to share resources such as files and printers. Samba is primarily used in environments where there are both Windows and Linux/Unix computers, allowing the computers to seamlessly share resources and communicate with each other. It is often used in small and medium-sized business networks and home networks where there are both Windows and Linux/Unix computers.","title":"The Solution: Samba"},{"location":"blog/2022-12-21-samba/#how-to-use-samba","text":"Open Files (the file manager for Pop!_OS ). Click on the + Other Locations button and then type the following in the Enter server address... field: smb://remote-computer-name.domain/c$ Note: You will need to change the placeholder above to the actual server that you are connecting to. You may notice that all we've done is replace the forward slashes with backslashes and add smb as a prefix but that's all there is to it. Once you click on Connect you'll be asked to enter your Windows credentials Now you can create and copy files to and from your remote server as if you were working with your local file system.","title":"How to use Samba"},{"location":"blog/2022-12-21-samba/#conclusion","text":"Copying files from and to a remote server is easy using the using the SMB protocol. However, I would much prefer to be able to insert the files directly via an RDP session, but that will only be possible if I can find out how to do it.","title":"Conclusion"},{"location":"blog/2023-02-17-docker/","tags":["Linux","Pos_OS","Docker"],"text":"I've been using Docker for about 4+ years now, and it really simplifies software development and deployment. Docker works well on Windows 10 under WSL 2.0. However, once you've run Docker natively on a Linux machine, you'll notice a huge difference in performance, memory and space usage, and there's really no comparison between running Docker natively and 'emulating' Docker in a WSL Linux kernel via Hyper V. As with all my guides, I'll be using Pop!_OS as my Linux distro of choice. Introduction \u00b6 Required skill level: Intermediate I use Docker every day, and these are the things I use Docker for: Create Docker images to deploy software that runs on virtual machines Running relational databases in containers Building .Net and Angular software applications using Docker BuildKit Running VPN software in Docker to simplify the installation and use of VPN software In this guide we'll be learning about how to install Docker on Pop!_OS and how to run multiple relational database containers using Docker. Installing Docker \u00b6 Here I'll give you the scripts I use to install Docker, but I'll also go through what the scripts actually install. It can be dangerous to just copy and paste scripts, so I'll try to explain what the scripts actually do as we go along. There are a number of dependencies for adding the Docker apt sources: ca-certificates - contains a number of common certificates used for SSL/TLS encryption. curl - a command line tool for interacting with web servers, often used to download files. gnupg - GNU Privacy Guard is a tool for secure communication and storage. It's used to encrypt and sign messages. lsb-release - Provides information about the version and distribution of the Linux distribution you are currently using. # Get dependencies to install docker sudo apt-get update sudo apt-get -y install ca-certificates curl gnupg lsb-release Now we should have all the dependencies that we need to add the Docker apt sources to our apt sources, which allows us to get the latest Docker packages from Docker itself, rather than getting the images from the Pop!_OS or Ubuntu maintainers. # Add docker ppa reference sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" \\ | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Next, we'll actually install Docker and its associated packages: docker-ce - Package for the Docker Community Edition. docker-ce-cli - Package for the Docker Command Line Interface, a tool for managing Docker containers and images from the command line. docker-compose - A tool for defining and running multi-container Docker applications. # Install docker sudo apt-get update sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose Once Docker is installed, I don't like using sudo for every Docker command on my local machine. If I add my current user to the docker group, I won't need to use sudo when using Docker. This step is optional. If you don't perform this step, you will need to add the sudo command before each Docker command in the future. Note that you will need to reboot your machine after running the script below for the change to take effect. # Make a docker group and add the current user to the group sudo groupadd docker sudo usermod -aG docker ${USER} Now, to test that Docker is successfully installed, run the following, and you should get the expected output if Docker is installed correctly. docker ps # Expected output # CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES Using Docker to install relational databases \u00b6 I typically use Docker to run relational databases because I use multiple database software. By using Docker, I can have a different 'server' for each project I'm working on and only have that server available when and if I need it, rather than having it running in the background all the time. Here is the script I use to spin up a MS SQL Server, PostgreSQL and MySQL server databases. For each server we use its default port and password \"SuperWeakPassword123!\" # Spin up MS SQL Server 2019 Developer edition docker run -d \\ -e \"ACCEPT_EULA=Y\" \\ -e \"MSSQL_SA_PASSWORD=SuperWeakPassword123!\" \\ -p 1433:1433 \\ --name sql-server-2019-playground \\ mcr.microsoft.com/mssql/server:2019-CU18-ubuntu-20.04 # Spin up MySQL Server 8 docker run -d \\ -e \"MYSQL_ROOT_PASSWORD=SuperWeakPassword123!\" \\ -p3306:3306 \\ --name mysql-8-playground \\ mysql:8.0.27 # Spin up PosgreSQL 14 docker run -d \\ --name posgresql-14-playground \\ -e \"POSTGRES_PASSWORD=SuperWeakPassword123!\" \\ -p 5432:5432 \\ postgres:14.1-alpine Starting and stopping these containers is as simple as the commands below. # Remember to replace \"container-name\" with the actual container name docker stop container-name docker start container-name Since these are just playground containers, after I've finished testing what I want to test in SQL, I can just nuke them with the following commands docker rm sql-server-2019-playground --force docker rm posgresql-14-playground --force docker rm mysql-8-playground --force But what if you actually want to store the database files outside the container? You can do this by attaching a volume to the folder where the database files inside the container. This makes it much easier to database from, say, a production server back to your local development container. Here we have the same script we used to spin up the SQL Server container, but note the extra part --volume sql-server-2019-project1:/var/opt/mssql . This will create a volume called sql-server-2019-project1 in the /var/lib/docker/volumes/ folder on your machine. You can easily dump a backup file or even drop a mdf and ldf file into the volume, and it will be picked up by SQL Server. # Spin up MS SQL Server 2019 Developer edition docker run -d \\ -e \"ACCEPT_EULA=Y\" \\ -e \"MSSQL_SA_PASSWORD=SuperWeakPassword123!\" \\ -p 1433:1433 \\ --name sql-server-2019-project1 \\ --volume sql-server-2019-project1:/var/opt/mssql \\ mcr.microsoft.com/mssql/server:2019-CU18-ubuntu-20.04 If we navigate to this volume in the GUI, we can see that there are the following folders in the volume: data - contains the mdf and ldf files for all databases log - contains the error log and trace files for SQL Server secrets - holds certificates and other secrets Typically, I create a new folder called backups, put the .bak files in that folder and then restore the backups using Azure Data Studio. The allows the volume's files to be easily accessible between my local machine and from within the container. Conclusion \u00b6 Installing Docker is very useful for a local development environment. It is particularly useful when working with relational databases and makes it really easy to test software against different versions of the same database engine. With each project running in a different container, switching between projects becomes much easier as each container only has the databases associated with that project.","title":"2023 02 17 docker"},{"location":"blog/2023-02-17-docker/#introduction","text":"Required skill level: Intermediate I use Docker every day, and these are the things I use Docker for: Create Docker images to deploy software that runs on virtual machines Running relational databases in containers Building .Net and Angular software applications using Docker BuildKit Running VPN software in Docker to simplify the installation and use of VPN software In this guide we'll be learning about how to install Docker on Pop!_OS and how to run multiple relational database containers using Docker.","title":"Introduction"},{"location":"blog/2023-02-17-docker/#installing-docker","text":"Here I'll give you the scripts I use to install Docker, but I'll also go through what the scripts actually install. It can be dangerous to just copy and paste scripts, so I'll try to explain what the scripts actually do as we go along. There are a number of dependencies for adding the Docker apt sources: ca-certificates - contains a number of common certificates used for SSL/TLS encryption. curl - a command line tool for interacting with web servers, often used to download files. gnupg - GNU Privacy Guard is a tool for secure communication and storage. It's used to encrypt and sign messages. lsb-release - Provides information about the version and distribution of the Linux distribution you are currently using. # Get dependencies to install docker sudo apt-get update sudo apt-get -y install ca-certificates curl gnupg lsb-release Now we should have all the dependencies that we need to add the Docker apt sources to our apt sources, which allows us to get the latest Docker packages from Docker itself, rather than getting the images from the Pop!_OS or Ubuntu maintainers. # Add docker ppa reference sudo mkdir -p /etc/apt/keyrings curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg sudo echo \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" \\ | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null Next, we'll actually install Docker and its associated packages: docker-ce - Package for the Docker Community Edition. docker-ce-cli - Package for the Docker Command Line Interface, a tool for managing Docker containers and images from the command line. docker-compose - A tool for defining and running multi-container Docker applications. # Install docker sudo apt-get update sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin docker-compose Once Docker is installed, I don't like using sudo for every Docker command on my local machine. If I add my current user to the docker group, I won't need to use sudo when using Docker. This step is optional. If you don't perform this step, you will need to add the sudo command before each Docker command in the future. Note that you will need to reboot your machine after running the script below for the change to take effect. # Make a docker group and add the current user to the group sudo groupadd docker sudo usermod -aG docker ${USER} Now, to test that Docker is successfully installed, run the following, and you should get the expected output if Docker is installed correctly. docker ps # Expected output # CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES","title":"Installing Docker"},{"location":"blog/2023-02-17-docker/#using-docker-to-install-relational-databases","text":"I typically use Docker to run relational databases because I use multiple database software. By using Docker, I can have a different 'server' for each project I'm working on and only have that server available when and if I need it, rather than having it running in the background all the time. Here is the script I use to spin up a MS SQL Server, PostgreSQL and MySQL server databases. For each server we use its default port and password \"SuperWeakPassword123!\" # Spin up MS SQL Server 2019 Developer edition docker run -d \\ -e \"ACCEPT_EULA=Y\" \\ -e \"MSSQL_SA_PASSWORD=SuperWeakPassword123!\" \\ -p 1433:1433 \\ --name sql-server-2019-playground \\ mcr.microsoft.com/mssql/server:2019-CU18-ubuntu-20.04 # Spin up MySQL Server 8 docker run -d \\ -e \"MYSQL_ROOT_PASSWORD=SuperWeakPassword123!\" \\ -p3306:3306 \\ --name mysql-8-playground \\ mysql:8.0.27 # Spin up PosgreSQL 14 docker run -d \\ --name posgresql-14-playground \\ -e \"POSTGRES_PASSWORD=SuperWeakPassword123!\" \\ -p 5432:5432 \\ postgres:14.1-alpine Starting and stopping these containers is as simple as the commands below. # Remember to replace \"container-name\" with the actual container name docker stop container-name docker start container-name Since these are just playground containers, after I've finished testing what I want to test in SQL, I can just nuke them with the following commands docker rm sql-server-2019-playground --force docker rm posgresql-14-playground --force docker rm mysql-8-playground --force But what if you actually want to store the database files outside the container? You can do this by attaching a volume to the folder where the database files inside the container. This makes it much easier to database from, say, a production server back to your local development container. Here we have the same script we used to spin up the SQL Server container, but note the extra part --volume sql-server-2019-project1:/var/opt/mssql . This will create a volume called sql-server-2019-project1 in the /var/lib/docker/volumes/ folder on your machine. You can easily dump a backup file or even drop a mdf and ldf file into the volume, and it will be picked up by SQL Server. # Spin up MS SQL Server 2019 Developer edition docker run -d \\ -e \"ACCEPT_EULA=Y\" \\ -e \"MSSQL_SA_PASSWORD=SuperWeakPassword123!\" \\ -p 1433:1433 \\ --name sql-server-2019-project1 \\ --volume sql-server-2019-project1:/var/opt/mssql \\ mcr.microsoft.com/mssql/server:2019-CU18-ubuntu-20.04 If we navigate to this volume in the GUI, we can see that there are the following folders in the volume: data - contains the mdf and ldf files for all databases log - contains the error log and trace files for SQL Server secrets - holds certificates and other secrets Typically, I create a new folder called backups, put the .bak files in that folder and then restore the backups using Azure Data Studio. The allows the volume's files to be easily accessible between my local machine and from within the container.","title":"Using Docker to install relational databases"},{"location":"blog/2023-02-17-docker/#conclusion","text":"Installing Docker is very useful for a local development environment. It is particularly useful when working with relational databases and makes it really easy to test software against different versions of the same database engine. With each project running in a different container, switching between projects becomes much easier as each container only has the databases associated with that project.","title":"Conclusion"},{"location":"blog/2023-05-06-the-linux-experience/","tags":["Linux","Pop_OS","Experience"],"text":"Having used Microsoft products throughout my entire life, beginning from MS-DOS 6.1 and progressing all the way to Windows 11, I have occasionally dabbled with Linux. However, in the past, I have consistently returned to Windows. Recently, I came across a challenge on Linus Tech Tips, where they pushed themselves to utilize Linux exclusively for an entire month to gain a deeper understanding of the system with its pros and cons. Inspired by their experiment, I decided to go on a similar journey. Unexpectedly, my Linux exploration lasted well beyond a year, and I am presently using Pop!_OS as my primary operating system. Introduction \u00b6 For the past six months, I have been using Pop!_OS as my primary operating system for work purposes. As a senior full stack developer, my work primarily revolves around creating software using the Microsoft stack, including SQL Server, C#, and Angular. Beyond my professional responsibilities, I am an avid PC gamer and was curious to explore the gaming potential of Linux. I spent slightly over a year exclusively gaming on Pop!_OS without any dual boot setup. I believe that I have used the OS for a sufficient length of time to give a run down of my overall experience for this operating system. Having used Windows for such a long time prior to using Linux, I'll be comparing each Linux experience with the corresponding Windows experience. Updates \u00b6 In the world of Windows, every piece of software you install seems to have some sort of automatic update service running in the background. So when you boot up, all your browsers are updating, Adobe is updating, Steam is updating, Epic is updating, and in the background Windows itself is installing updates. In this day and age with easily accessible broadband internet, this is much less of an issue. However, when you go on holiday and there isn't Wi-Fi available, and you are using your limited mobile data plan this is an issue. You can of cause tell your system that you are on a \"metered connection\" but not all the software that you have installed seems to obey this rule. Finally, after updates have completed downloading then you have a few minutes to wait until the Windows takes its time installing these updates. On the other hand on Linux, typically all your software is installed via package managers. For Pop!_OS there are two package managers: \"APT\" and \"Flatpak\". No updates happen unless you kick them off yourself. You can of cause opt in for automatic updates if you wish. I like being more in control of when updates occur. Typically, Microsoft seems to know when I have a work presentation planned or stand-up meeting and is sure to interfere with an update at the same time. File Locking \u00b6 This \"feature\" in Windows really drives me up the wall. If you've been using Windows for any length of time, when you try to delete or move a file, you'll get that annoying \"the action cannot be completed because the folder or a file in it is open in another program\" dialogue. Then you go looking for the random application that's locking up a file in the folder you're trying to delete, only to find that it's Windows Defender that's scanning the files you're trying to delete. Fortunately, Linux does not have this \"feature\". You can delete the files of an application while it's running, and it will continue to run in memory. If you're downloading a video file, you can watch the downloaded part of the video while it's still downloading without risking breaking the download. Going back to the topic of updates, if you update Firefox on Linux while the Firefox browser is open, if you want the updated version, it's just a matter of closing and reopening Firefox, and you'll have the updated version. Writing Software \u00b6 Since, I'm a software developer, writing software features in my experience of Pop!_OS. I have written a number of .Net Core and .Net 6 and 7 applications. If you're writing a new application in the latest version of .Net, you'll have no problem writing the application on Linux. Since I mostly write web applications, they usually run in a Docker container or a Linux VM. Writing the software in Linux ensures that it will run on it's intended target machine. However, there are a few pitfalls to be aware of when writing code that needs to run on Linux, particularly when working with files: When referring to external files, most Linux file systems are case-sensitive, meaning that my-file.txt and My-File.txt refer to two separate files. On Windows, these two files are the same file. The solution is to always use case-sensitive filenames and paths in your code when reading external folders or files. Always use slashes (/) as path separators. Windows favours backslashes (), but it works fine with both. Something that has really helped me to be a more productive developer on Pop!_OS is the JetBrains IDE tool suite. Since I already had experience with JetBrains Rider on Windows, the switch to Linux was virtually seamless. However, there's one tool that I need for my day-to-day work, and the Linux alternatives are pretty lacking. I'm running a Windows 10 virtual machine in VirtualBox primarily to run this tool. That tool is SQL Server Management Studio. There are alternatives such as Azure Data Studio and the SQL Server extension for VS Code, but I have found that SQL Server Management Studio is usually more stable and has more scripting capabilities and has better UI capabilities. If your application depends on either: Winforms, WPF, or you are using an old version of the .Net Framework. Then it would be safer to keep your development work on Windows. Gaming \u00b6 These days, Linux is surprisingly good at running computer games, even those not originally designed for Linux. However, Windows is still the king of PC gaming. I have played a number of indie and AAA games on Pop!_OS including Skyrim, Stardew Valley, Borderlands 3, Mortal Kombat 11, Terraria, Two Point Hospital, The Sims 4, Devil May Cry 1-4, Slim Rancher, Fallout 3 and 4. Just to name a few. Sometimes the framerates were slightly worse than on Windows, but for other games the performance was slightly better. I haven't come across a single Steam game I wanted to play that wouldn't launch at all. Unfortunately, many competitive online games do not play well on Linux due to their anti-cheat software. For example, you probably won't be able to play Rust, PUBG or Dead by Daylight any time soon. Also, if you want to use VR, Linux is still a bit behind. So honestly, if you have a gaming rig and only play PC games. Just use Windows 10 (avoid Windows 11 until they stop breaking gaming performance with their updates). Personally, I switched back to Windows 10 a few weeks ago because I wanted to play Dauntless (doesn't work on Linux due to Easy Anti-Cheat). If you are more of an emulation gamer and like to play your old Playstation 1, 2 and 3 games or the old Nintendo games on the PC, then Linux might be better for you. This is because Linux seems to have more emulator software available than Windows. Conclusion \u00b6 Both Windows and Pop!_OS are excellent operating systems for getting work done and for gaming. Pop!_OS seems to be much more stable, has a better update strategy and works well as a software development machine. Windows has some tools that are very useful that have no cross-platform alternatives and is still the king of pc gaming. So which one should you choose? If you want a dedicated machine where all your PC games work, you play competitive online games, or you have a VR headset, then go for Windows. If you are a casual gamer, or enjoy a lot of emulation then Pop!_OS should work well for you. If you want a development machine with more configuration options, then Pop!_OS might be an option.","title":"2023 05 06 the linux experience"},{"location":"blog/2023-05-06-the-linux-experience/#introduction","text":"For the past six months, I have been using Pop!_OS as my primary operating system for work purposes. As a senior full stack developer, my work primarily revolves around creating software using the Microsoft stack, including SQL Server, C#, and Angular. Beyond my professional responsibilities, I am an avid PC gamer and was curious to explore the gaming potential of Linux. I spent slightly over a year exclusively gaming on Pop!_OS without any dual boot setup. I believe that I have used the OS for a sufficient length of time to give a run down of my overall experience for this operating system. Having used Windows for such a long time prior to using Linux, I'll be comparing each Linux experience with the corresponding Windows experience.","title":"Introduction"},{"location":"blog/2023-05-06-the-linux-experience/#updates","text":"In the world of Windows, every piece of software you install seems to have some sort of automatic update service running in the background. So when you boot up, all your browsers are updating, Adobe is updating, Steam is updating, Epic is updating, and in the background Windows itself is installing updates. In this day and age with easily accessible broadband internet, this is much less of an issue. However, when you go on holiday and there isn't Wi-Fi available, and you are using your limited mobile data plan this is an issue. You can of cause tell your system that you are on a \"metered connection\" but not all the software that you have installed seems to obey this rule. Finally, after updates have completed downloading then you have a few minutes to wait until the Windows takes its time installing these updates. On the other hand on Linux, typically all your software is installed via package managers. For Pop!_OS there are two package managers: \"APT\" and \"Flatpak\". No updates happen unless you kick them off yourself. You can of cause opt in for automatic updates if you wish. I like being more in control of when updates occur. Typically, Microsoft seems to know when I have a work presentation planned or stand-up meeting and is sure to interfere with an update at the same time.","title":"Updates"},{"location":"blog/2023-05-06-the-linux-experience/#file-locking","text":"This \"feature\" in Windows really drives me up the wall. If you've been using Windows for any length of time, when you try to delete or move a file, you'll get that annoying \"the action cannot be completed because the folder or a file in it is open in another program\" dialogue. Then you go looking for the random application that's locking up a file in the folder you're trying to delete, only to find that it's Windows Defender that's scanning the files you're trying to delete. Fortunately, Linux does not have this \"feature\". You can delete the files of an application while it's running, and it will continue to run in memory. If you're downloading a video file, you can watch the downloaded part of the video while it's still downloading without risking breaking the download. Going back to the topic of updates, if you update Firefox on Linux while the Firefox browser is open, if you want the updated version, it's just a matter of closing and reopening Firefox, and you'll have the updated version.","title":"File Locking"},{"location":"blog/2023-05-06-the-linux-experience/#writing-software","text":"Since, I'm a software developer, writing software features in my experience of Pop!_OS. I have written a number of .Net Core and .Net 6 and 7 applications. If you're writing a new application in the latest version of .Net, you'll have no problem writing the application on Linux. Since I mostly write web applications, they usually run in a Docker container or a Linux VM. Writing the software in Linux ensures that it will run on it's intended target machine. However, there are a few pitfalls to be aware of when writing code that needs to run on Linux, particularly when working with files: When referring to external files, most Linux file systems are case-sensitive, meaning that my-file.txt and My-File.txt refer to two separate files. On Windows, these two files are the same file. The solution is to always use case-sensitive filenames and paths in your code when reading external folders or files. Always use slashes (/) as path separators. Windows favours backslashes (), but it works fine with both. Something that has really helped me to be a more productive developer on Pop!_OS is the JetBrains IDE tool suite. Since I already had experience with JetBrains Rider on Windows, the switch to Linux was virtually seamless. However, there's one tool that I need for my day-to-day work, and the Linux alternatives are pretty lacking. I'm running a Windows 10 virtual machine in VirtualBox primarily to run this tool. That tool is SQL Server Management Studio. There are alternatives such as Azure Data Studio and the SQL Server extension for VS Code, but I have found that SQL Server Management Studio is usually more stable and has more scripting capabilities and has better UI capabilities. If your application depends on either: Winforms, WPF, or you are using an old version of the .Net Framework. Then it would be safer to keep your development work on Windows.","title":"Writing Software"},{"location":"blog/2023-05-06-the-linux-experience/#gaming","text":"These days, Linux is surprisingly good at running computer games, even those not originally designed for Linux. However, Windows is still the king of PC gaming. I have played a number of indie and AAA games on Pop!_OS including Skyrim, Stardew Valley, Borderlands 3, Mortal Kombat 11, Terraria, Two Point Hospital, The Sims 4, Devil May Cry 1-4, Slim Rancher, Fallout 3 and 4. Just to name a few. Sometimes the framerates were slightly worse than on Windows, but for other games the performance was slightly better. I haven't come across a single Steam game I wanted to play that wouldn't launch at all. Unfortunately, many competitive online games do not play well on Linux due to their anti-cheat software. For example, you probably won't be able to play Rust, PUBG or Dead by Daylight any time soon. Also, if you want to use VR, Linux is still a bit behind. So honestly, if you have a gaming rig and only play PC games. Just use Windows 10 (avoid Windows 11 until they stop breaking gaming performance with their updates). Personally, I switched back to Windows 10 a few weeks ago because I wanted to play Dauntless (doesn't work on Linux due to Easy Anti-Cheat). If you are more of an emulation gamer and like to play your old Playstation 1, 2 and 3 games or the old Nintendo games on the PC, then Linux might be better for you. This is because Linux seems to have more emulator software available than Windows.","title":"Gaming"},{"location":"blog/2023-05-06-the-linux-experience/#conclusion","text":"Both Windows and Pop!_OS are excellent operating systems for getting work done and for gaming. Pop!_OS seems to be much more stable, has a better update strategy and works well as a software development machine. Windows has some tools that are very useful that have no cross-platform alternatives and is still the king of pc gaming. So which one should you choose? If you want a dedicated machine where all your PC games work, you play competitive online games, or you have a VR headset, then go for Windows. If you are a casual gamer, or enjoy a lot of emulation then Pop!_OS should work well for you. If you want a development machine with more configuration options, then Pop!_OS might be an option.","title":"Conclusion"},{"location":"blog/2023-11-13-virtualbox/","text":"VPN software is often a major inconvenience, either blocking Internet access or severely limiting the speed at which you can connect. This makes attending meetings and troubleshooting problems with limited Internet access a challenge. Installing and using VPN software on Linux is also generally quite complicated, as I've outlined in my guide The Battle Between Pop!_OS & VPN Software . A simple solution to these challenges is to run the VPN software inside a virtual machine. This approach ensures that your primary machine remains unaffected by the VPN's limitations. Given the user-friendly nature of most VPN software on Windows, I've chosen to use Windows 10 as my guest Virtual Machine. Another benefit of using a Windows Virtual Machine is the ease with which you can install and run Windows exclusive software, such as Visual Studio, SQL Server Management Studio and Adobe PDF Viewer to name a few. Secondly, if your Windows-only application works perfectly in a VM, you don't have to dual-boot every time you want to use it. For this guide, we are going to be using VirtualBox, which is free for private and commercial use. Introduction \u00b6 Skill level required: Intermediate Before we can start using VirtualBox, we need to install it. As with most installations on Linux, we will open the Terminal and run the following to install VirtualBox. Installing VirtualBox \u00b6 sudo apt update sudo apt install virtualbox virtualbox-guest-additions-iso Installing Windows 10 in VirtualBox \u00b6 Download the official Windows 10 ISO from Microsoft https://www.microsoft.com/en-gb/software-download/windows10ISO Add a new virtual machine to VirtualBox. Machine >> New Name your virtual machine, choose where you want to store its files, select the ISO you downloaded and tick Skip Unattended Installation . Depending on the use case for the virtual machine, I choose the memory and processors accordingly. For the VPN virtual machine, 4GB RAM and 2 processors are sufficient. If I'm creating a development machine, I'll go for 8-16GB RAM and 4 processors. I usually go with about 80\u2013100GB for Disk Size Now the machine is created, but before booting I go to Settings >> Network . I change the Attached to drop down to a Bridged Adapter, and then I select the correct name. If you are connecting the VM to your Wi-Fi network, it will have something starting with wl (wireless lan) and if you are connecting the VM to ethernet, it will start with en . I then uncheck Enable network adapter during installation. This allows me to install Windows 10 using a local user account, rather than linking it to my online Microsoft account. If Microsoft cannot detect that you are connected to a network during installation, it will allow this option. The reason I switch to a bridged adapter is that you generally cannot use VPN software in a VM over NAT. Now install Windows as usual Once the Windows 10 installation is complete, and you've booted to the desktop. Enable the network again. Installing VirtualBox Guest Additions \u00b6 The VirtualBox Guest Additions give us a number of useful features: Screen resizing (via a virtual display driver) Shared clipboard between host and guest machine Shared Folders (file sharing between host and guest) Seamless mode (allows application windows from the guest OS to run directly on the host desktop) To install Virtualbox Guest Additions , select Devices >> Insert Guest Additions CD Image... Next, navigate to the connected DVD drive and run the VBoxWindowsAdditions.exe application. After the Guest Additions are installed, you'll be prompted to restart the virtual machine. After the restart is complete, you will know that the Guest Additions have been installed correctly if your virtual machine resizes correctly. Optional Steps \u00b6 These are the typical tweaks I make on every new Windows 10 installation. Debloat Windows \u00b6 I like to use a 'Windows 10 Debloater', which removes all the stuff I don't use in the operating system, such as Candy Crush, Cortana and One-drive. Have a look at its README.md to see how to use it https://github.com/Sycnex/Windows10Debloater/archive/refs/heads/master.zip Disable Visual Effects \u00b6 I usually turn off all visual effects as they just slow the machine down. I usually leave Smooth edges of screen fonts alone, otherwise the text on the screen can be very difficult to read. Replace the Start Menu with Open-Shell \u00b6 I usually replace the Start Menu with Open-Shell as it loads much faster, and it's easy to configure https://github.com/Open-Shell/Open-Shell-Menu/releases Disable Hibernation \u00b6 Disable system hibernation as it takes up a lot of disk space. Go to the command prompt as an administrator and run the following: powercfg /hibernate off Shrink the Windows System partition \u00b6 I find that Windows keeps trying to use more and more disk space. Even if you free up space, the VirtualBox vdi files continue to use the maximum space the operating system has grown to. To prevent this, I aggressively limit the maximum space that Windows can use for the C drive. I then expand the drive when more space is needed, if I cannot free additional space. Disable background apps \u00b6 I'm not sure why Windows thinks it's necessary to have applications like the calculator, 3D viewer and camera running in the background all the time. This is a waste of CPU cycles. I disable all the ones I don't need. Troubleshooting \u00b6 Shared folder missing after VM is restarted \u00b6 Make sure that you select both Auto-mount and Make Permanent when adding a new Shared Folder . Clipboard not working between VM and Host machine \u00b6 Did you turn it on under Devices >> Shared Clipboard >> Bidirectional ? Clipboard randomly stops working \u00b6 You can fix this by killing the c:\\Windows\\System32\\VBoxTray.exe process and starting it again. I usually put a batch file on my Windows VM desktop as this happens alot for me. I call my batch file fix-clipboard.bat and I put it on my desktop with the content below. :: Terminate the VirtualBox tray application taskkill /F /IM VBoxTray.exe :: Restart the VirtualBox tray application START \"VboxTray\" \"c:\\Windows\\System32\\VBoxTray.exe\" My VM has no internet access \u00b6 If you are using a Bridged Adapter make sure that the Name selected is the name of the network that you are actually using. I.e. wl (wireless lan) if you are connecting via Wi-Fi and if you are connecting the VM to ethernet, it will start with en . Also make sure that Enable Network Adapter is ticked. Conclusion \u00b6 After successfully configuring your Virtual Machine (VM), you can proceed to install your preferred VPN software within the VM environment as well as any other tools that are exclusive to Windows. In my personal experience, this approach works with the following VPN software: FortiClient VPN Cisco AnyConnect Secure Mobility Client Global Protect Azure VPN Client Citrix Workspace App An additional advantage of adopting this method is that dual-booting your machine is not required.","title":"2023 11 13 virtualbox"},{"location":"blog/2023-11-13-virtualbox/#introduction","text":"Skill level required: Intermediate Before we can start using VirtualBox, we need to install it. As with most installations on Linux, we will open the Terminal and run the following to install VirtualBox.","title":"Introduction"},{"location":"blog/2023-11-13-virtualbox/#installing-virtualbox","text":"sudo apt update sudo apt install virtualbox virtualbox-guest-additions-iso","title":"Installing VirtualBox"},{"location":"blog/2023-11-13-virtualbox/#installing-windows-10-in-virtualbox","text":"Download the official Windows 10 ISO from Microsoft https://www.microsoft.com/en-gb/software-download/windows10ISO Add a new virtual machine to VirtualBox. Machine >> New Name your virtual machine, choose where you want to store its files, select the ISO you downloaded and tick Skip Unattended Installation . Depending on the use case for the virtual machine, I choose the memory and processors accordingly. For the VPN virtual machine, 4GB RAM and 2 processors are sufficient. If I'm creating a development machine, I'll go for 8-16GB RAM and 4 processors. I usually go with about 80\u2013100GB for Disk Size Now the machine is created, but before booting I go to Settings >> Network . I change the Attached to drop down to a Bridged Adapter, and then I select the correct name. If you are connecting the VM to your Wi-Fi network, it will have something starting with wl (wireless lan) and if you are connecting the VM to ethernet, it will start with en . I then uncheck Enable network adapter during installation. This allows me to install Windows 10 using a local user account, rather than linking it to my online Microsoft account. If Microsoft cannot detect that you are connected to a network during installation, it will allow this option. The reason I switch to a bridged adapter is that you generally cannot use VPN software in a VM over NAT. Now install Windows as usual Once the Windows 10 installation is complete, and you've booted to the desktop. Enable the network again.","title":"Installing Windows 10 in VirtualBox"},{"location":"blog/2023-11-13-virtualbox/#installing-virtualbox-guest-additions","text":"The VirtualBox Guest Additions give us a number of useful features: Screen resizing (via a virtual display driver) Shared clipboard between host and guest machine Shared Folders (file sharing between host and guest) Seamless mode (allows application windows from the guest OS to run directly on the host desktop) To install Virtualbox Guest Additions , select Devices >> Insert Guest Additions CD Image... Next, navigate to the connected DVD drive and run the VBoxWindowsAdditions.exe application. After the Guest Additions are installed, you'll be prompted to restart the virtual machine. After the restart is complete, you will know that the Guest Additions have been installed correctly if your virtual machine resizes correctly.","title":"Installing VirtualBox Guest Additions"},{"location":"blog/2023-11-13-virtualbox/#optional-steps","text":"These are the typical tweaks I make on every new Windows 10 installation.","title":"Optional Steps"},{"location":"blog/2023-11-13-virtualbox/#debloat-windows","text":"I like to use a 'Windows 10 Debloater', which removes all the stuff I don't use in the operating system, such as Candy Crush, Cortana and One-drive. Have a look at its README.md to see how to use it https://github.com/Sycnex/Windows10Debloater/archive/refs/heads/master.zip","title":"Debloat Windows"},{"location":"blog/2023-11-13-virtualbox/#disable-visual-effects","text":"I usually turn off all visual effects as they just slow the machine down. I usually leave Smooth edges of screen fonts alone, otherwise the text on the screen can be very difficult to read.","title":"Disable Visual Effects"},{"location":"blog/2023-11-13-virtualbox/#replace-the-start-menu-with-open-shell","text":"I usually replace the Start Menu with Open-Shell as it loads much faster, and it's easy to configure https://github.com/Open-Shell/Open-Shell-Menu/releases","title":"Replace the Start Menu with Open-Shell"},{"location":"blog/2023-11-13-virtualbox/#disable-hibernation","text":"Disable system hibernation as it takes up a lot of disk space. Go to the command prompt as an administrator and run the following: powercfg /hibernate off","title":"Disable Hibernation"},{"location":"blog/2023-11-13-virtualbox/#shrink-the-windows-system-partition","text":"I find that Windows keeps trying to use more and more disk space. Even if you free up space, the VirtualBox vdi files continue to use the maximum space the operating system has grown to. To prevent this, I aggressively limit the maximum space that Windows can use for the C drive. I then expand the drive when more space is needed, if I cannot free additional space.","title":"Shrink the Windows System partition"},{"location":"blog/2023-11-13-virtualbox/#disable-background-apps","text":"I'm not sure why Windows thinks it's necessary to have applications like the calculator, 3D viewer and camera running in the background all the time. This is a waste of CPU cycles. I disable all the ones I don't need.","title":"Disable background apps"},{"location":"blog/2023-11-13-virtualbox/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"blog/2023-11-13-virtualbox/#shared-folder-missing-after-vm-is-restarted","text":"Make sure that you select both Auto-mount and Make Permanent when adding a new Shared Folder .","title":"Shared folder missing after VM is restarted"},{"location":"blog/2023-11-13-virtualbox/#clipboard-not-working-between-vm-and-host-machine","text":"Did you turn it on under Devices >> Shared Clipboard >> Bidirectional ?","title":"Clipboard not working between VM and Host machine"},{"location":"blog/2023-11-13-virtualbox/#clipboard-randomly-stops-working","text":"You can fix this by killing the c:\\Windows\\System32\\VBoxTray.exe process and starting it again. I usually put a batch file on my Windows VM desktop as this happens alot for me. I call my batch file fix-clipboard.bat and I put it on my desktop with the content below. :: Terminate the VirtualBox tray application taskkill /F /IM VBoxTray.exe :: Restart the VirtualBox tray application START \"VboxTray\" \"c:\\Windows\\System32\\VBoxTray.exe\"","title":"Clipboard randomly stops working"},{"location":"blog/2023-11-13-virtualbox/#my-vm-has-no-internet-access","text":"If you are using a Bridged Adapter make sure that the Name selected is the name of the network that you are actually using. I.e. wl (wireless lan) if you are connecting via Wi-Fi and if you are connecting the VM to ethernet, it will start with en . Also make sure that Enable Network Adapter is ticked.","title":"My VM has no internet access"},{"location":"blog/2023-11-13-virtualbox/#conclusion","text":"After successfully configuring your Virtual Machine (VM), you can proceed to install your preferred VPN software within the VM environment as well as any other tools that are exclusive to Windows. In my personal experience, this approach works with the following VPN software: FortiClient VPN Cisco AnyConnect Secure Mobility Client Global Protect Azure VPN Client Citrix Workspace App An additional advantage of adopting this method is that dual-booting your machine is not required.","title":"Conclusion"}]}