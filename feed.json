{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mike's Tech Tips",
    "description": "Michael is a softare developer and is an aspiring technical writer. He has a bachelor's degree in Computer Science, and 11 years of experience in the IT space.",
    "home_page_url": "https://wolfyreload.github.io/tech-blog",
    "items": [
        {
            "id": "https://wolfyreload.github.io/tech-blog/2021-01-15-terraria-dedicated-server/",
            "url": "https://wolfyreload.github.io/tech-blog/2021-01-15-terraria-dedicated-server/",
            "title": "Creating A Dedicated Cloud Server For Terraria In Azure",
            "date_published": "2022-01-15T10:25:41.000Z",
            "content_html": "<p>A guide on how to run your own dedicated <a href=\"https://www.terraria.org/\">Terraria</a> server in Azure.</p>\n<h1 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h1><p><strong>Skill Level Required:</strong> Intermediate</p>\n<p>Firstly, if you have never heard of <a href=\"https://www.terraria.org/\">Terraria</a> before, just do yourself a favour and buy a copy on <a href=\"https://store.steampowered.com/app/105600/Terraria/\">Steam</a> or <a href=\"https://www.gog.com/index.php/game/terraria\">GOG</a>. Now, <a href=\"https://www.terraria.org/\">Terraria</a> is a very fun game in single-player mode. But as with most games, it’s much more fun to play it with friends. </p>\n<p>Now you might be asking yourself, why would I want to create my own dedicated server over just inviting my friends over Steam? Here are a few advantages of having a dedicated Terraria Server:</p>\n<ol>\n<li>Not everyone plays <a href=\"https://www.terraria.org/\">Terraria</a> on Steam and Steam players cannot easily play with GOG players.</li>\n<li>Some people live in apartments with shared wifi and the router is not accessible for setting up port forwarding etc.</li>\n<li>Most people use wifi these days and if you host the game with your wifi network then everyone else will have additional latency.</li>\n<li>If one person is hosting the game and decides that they have had enough then no one else can play.</li>\n<li>If you want to change game hosts you need to manually copy the game world between people.</li>\n</ol>\n<p>Why would you want to set up your own private server over using a dedicated server platform that does all the work for you?</p>\n<ol>\n<li>Well, I live in South Africa and I couldn’t find a dedicated server platform for this country and having the game hosted in the States will add too much latency</li>\n<li>You looking at $10-$30 per month, regardless of how much you and your friends are playing. I’d rather have a server that I pay per hour and can turn off when it’s not needed.</li>\n</ol>\n<h1 id=\"Getting-Started\"><a href=\"#Getting-Started\" class=\"headerlink\" title=\"Getting Started\"></a>Getting Started</h1><p>You going to need the following for this tutorial:</p>\n<ul>\n<li>An <a href=\"https://signup.azure.com/\">Azure Account</a> for hosting your dedicated server.</li>\n<li>An ssh client, I’m going to be using <a href=\"https://github.com/subhra74/snowflake/releases/download/v1.0.4/snowflake.msi\">Snowflake</a> but you can use <a href=\"https://puttygen.com/download.php?val=4\">Putty</a> if you prefer. I just find Snowflake to be easier to use in general.</li>\n<li>A copy of Terraria on <a href=\"https://store.steampowered.com/app/105600/Terraria/\">Steam</a> or <a href=\"https://www.gog.com/index.php/game/terraria\">GOG</a></li>\n</ul>\n<h1 id=\"Creating-And-Configuring-An-Azure-Virtual-Machine\"><a href=\"#Creating-And-Configuring-An-Azure-Virtual-Machine\" class=\"headerlink\" title=\"Creating And Configuring An Azure Virtual Machine\"></a>Creating And Configuring An Azure Virtual Machine</h1><h2 id=\"Creating-Your-First-Ubuntu-Virtual-Machine\"><a href=\"#Creating-Your-First-Ubuntu-Virtual-Machine\" class=\"headerlink\" title=\"Creating Your First Ubuntu Virtual Machine\"></a>Creating Your First Ubuntu Virtual Machine</h2><p>Now I’m going to assume that you have created an Azure account and you have logged in.</p>\n<p>The first thing that you going to need to do is to create a <strong>Resource Group</strong>. Now a <strong>Resource Group</strong> is just a grouping of your VMs, storage volumes, virtual network interfaces that you have in your Azure account.</p>\n<p>To create a <strong>Resource Group</strong> simply click on the <strong>Resource Groups</strong> button.</p>\n<p><img src=\"img/azure/home-screen-resource-groups-min.png\"></p>\n<p>Next click on the <strong>Create</strong> button</p>\n<p>Now create a name for the <strong>Resource Group</strong>. I went for “Terraria-LAN-RG” and select a region nearby.</p>\n<p><img src=\"img/azure/resource-group-create-form-min.png\"></p>\n<p>Select the <strong>Review + create</strong> button, double-check your choices and if satisfied select the <strong>Create</strong> button.</p>\n<p>Now we open our newly created <strong>Resource Group</strong></p>\n<p><img src=\"img/azure/find-resource-group-min.png\"></p>\n<p>Next, we want to create a <strong>Virtual Machine</strong> resource. We click on the <strong>Create</strong> button and we are going to select <strong>Ubuntu Server 20.04 LTS</strong>.</p>\n<p><img src=\"img/azure/create-a-resource-ubuntu-min.png\"></p>\n<p>Complete the form and make sure that you choose <strong>Standard B2</strong> or any other option with at least 4GB of RAM for the <strong>Size</strong> and <strong>Password</strong> for <strong>Authentication Type</strong>. Make sure you create a nice strong password for the virtual machine. Keep the username and password handy as you are going to need them for the rest of this tutorial.</p>\n<p><img src=\"img/azure/vm-create-form-part1-min.png\"></p>\n<p>Select the <strong>Next: Disks</strong> button</p>\n<p>Change the <strong>OS disk type</strong> to <strong>Standard HDD</strong> since we don’t need fast disk speeds for a Terraria server.</p>\n<p><img src=\"img/azure/vm-create-form-part2-min.png\"></p>\n<p>Select <strong>Review + create</strong> button, double-check your settings and select the <strong>Create</strong> button.</p>\n<p>You’ll need to wait 2 minutes or so for Azure to create your virtual machine.</p>\n<p>Once the deployment is complete, select the <strong>Go to resource</strong> button</p>\n<p><img src=\"img/azure/deployment-go-to-resource-min.png\"></p>\n<h2 id=\"Configuring-Your-Virtual-Machine\"><a href=\"#Configuring-Your-Virtual-Machine\" class=\"headerlink\" title=\"Configuring Your Virtual Machine\"></a>Configuring Your Virtual Machine</h2><p>The first thing we are going to do is give our virtual machine a <strong>DNS name</strong> by clicking on the <strong>Configure</strong> link under <strong>Networking</strong> since IP addresses are much harder to remember</p>\n<p><img src=\"img/azure/virtual-machine-overview-min.png\"></p>\n<p>Change the <strong>IP address assignment</strong> to <strong>Static</strong> and give the server any DNS name that you like, I called mine <strong>terraria-lan</strong>. Now click on the <strong>Save</strong> button.</p>\n<p><img src=\"img/azure/virtual-machine-setup-dns-min.png\"></p>\n<p>Go back to the <strong>Overview</strong> screen of your <strong>Virtual Machine</strong>. Take note of your <strong>Public IP address</strong> and <strong>DNS name</strong> as you’ll need these later.</p>\n<p><img src=\"img/azure/virtual-machine-ip-dns-name-min.png\"></p>\n<p>Next, we need to go to <strong>Networking</strong> and open port <strong>7777</strong> (Terraria’s default port)</p>\n<p><img src=\"img/azure/virtual-machine-networking-min.png\"></p>\n<p>Select <strong>Add inbound port add</strong> button.</p>\n<p>Set the <strong>Destination port ranges</strong> to <strong>7777</strong> followed by the <strong>Add</strong> button.</p>\n<p><img src=\"img/azure/virtual-machine-networking-new-port-min.png\"></p>\n<p>The last thing that you might want to change is the <strong>Auto-Shutdown</strong> under <strong>Operations</strong> in the side menu. Having the <strong>Auto Shutdown</strong> will save you money but make sure you select a time that you are unlikely to be mid-game.</p>\n<p><img src=\"img/azure/virtual-machine-auto-shutdown-min.png\"></p>\n<h1 id=\"Running-Your-Server\"><a href=\"#Running-Your-Server\" class=\"headerlink\" title=\"Running Your Server\"></a>Running Your Server</h1><p>Now that your <strong>Virtual Machine</strong> is up and running.</p>\n<p>We need to do the following:</p>\n<ul>\n<li>Getting the server files from the Terraria website</li>\n<li>Transfer the server files to your new virtual machine</li>\n<li>Starting up the server</li>\n</ul>\n<h2 id=\"Getting-The-Server-Files\"><a href=\"#Getting-The-Server-Files\" class=\"headerlink\" title=\"Getting The Server Files\"></a>Getting The Server Files</h2><p>Download the latest version of <a href=\"https://terraria.fandom.com/wiki/Server#Downloads\">Terraria Server</a>, at the time of writing it was a version <a href=\"https://terraria.org/api/download/pc-dedicated-server/terraria-server-1432.zip\">1.4.3.2</a> and extract it to somewhere convenient on your computer. I went with <strong>c:\\temp\\terraria-server-1432</strong></p>\n<p>Open the subfolder <strong>1432\\Linux</strong> and it should look something like the screenshot below.</p>\n<p><img src=\"img/running/server-files-min.png\"></p>\n<h2 id=\"Transfering-The-Server-Files-To-Your-Virtual-Machine\"><a href=\"#Transfering-The-Server-Files-To-Your-Virtual-Machine\" class=\"headerlink\" title=\"Transfering The Server Files To Your Virtual Machine\"></a>Transfering The Server Files To Your Virtual Machine</h2><p>Fire up <strong>Snowflake</strong>. Add a <strong>New Connection</strong>. Create a <strong>New Site</strong>.</p>\n<ul>\n<li><strong>Name</strong> - Any name you want to call it. I called my site <strong>Terraria-Server</strong>.</li>\n<li><strong>Host</strong> - the DNS name that you captured earlier</li>\n<li><strong>User</strong> - the username you created for your VM</li>\n<li><strong>Password</strong> - the password you created for your VM</li>\n<li><strong>Terraria Server</strong> files</li>\n</ul>\n<p><img src=\"img/running/snowflake-config-min.png\"></p>\n<p>Click on the <strong>Connect</strong> button.</p>\n<p>You’ll get a notification that looks something like this. Click on <strong>Yes</strong></p>\n<p><img src=\"img/running/ssh-fingerprint-min.png\"></p>\n<p>In the <strong>Files</strong> section in <strong>SnowFlake</strong>. Change your path to the location where you extracted your <strong>Terraria Server</strong> files.</p>\n<p><img src=\"img/running/file-copy-min.png\"></p>\n<p>Just drag and drop your files from your Windows machine (on the right) to your Azure Ubuntu Server on the left. Select <strong>Yes</strong>. Then select <strong>OK</strong>. This might take a minute or two to complete.</p>\n<h2 id=\"Setting-Up-You-Server\"><a href=\"#Setting-Up-You-Server\" class=\"headerlink\" title=\"Setting Up You Server\"></a>Setting Up You Server</h2><p>Next, go to the <strong>Terminal</strong> tab in <strong>SnowFlake</strong>.</p>\n<p><img src=\"img/running/terminal-part1-min.png\"></p>\n<p>Now you can run any Linux command line commands here on your Ubuntu Virtual Machine. The first one we going to use is the <strong>ls</strong> command see confirm that we copied over all the files correctly.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"comment\"># Expected output</span></span><br><span class=\"line\"><span class=\"comment\"># FNA.dll  FNA.dll.config  Terraria-min.png  TerrariaServer  TerrariaServer.bin.x86_64...</span></span><br></pre></td></tr></table></figure>\n\n<p>If we can see all the files, we need to make the <strong>TerrariaServer.bin.x86_64</strong> file executable. We do this with the <strong>chmod</strong> command below</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x TerrariaServer.bin.x86_64</span><br></pre></td></tr></table></figure>\n\n<p>Now we can start our server by running <strong>TerrariaServer.bin.x86_64</strong>. Note the “./“ prefix make sure you include that.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./TerrariaServer.bin.x86_64</span><br></pre></td></tr></table></figure>\n\n<p>Follow the prompts for creating your server</p>\n<p><img src=\"img/running/world-setup-min.png\"></p>\n<p>Follow the prompts and if you see the following:</p>\n<p><img src=\"img/running/server-up-min.png\"></p>\n<p>Note: In future, you’ll just need to run the command below to run your server. </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./TerrariaServer.bin.x86_64</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Connecting-To-Your-New-Server\"><a href=\"#Connecting-To-Your-New-Server\" class=\"headerlink\" title=\"Connecting To Your New Server\"></a>Connecting To Your New Server</h2><p>Now we start up <strong>Terraria</strong>. Select <strong>Multiplayer</strong> followed by <strong>Join via IP</strong>. </p>\n<p>Select/Create your Character. Note that Classic characters can only play in Classic worlds, same for Journeyman characters.</p>\n<p><img src=\"img/terraria/server-ip-min.png\"></p>\n<p>Keep the default <strong>Port</strong></p>\n<p>Fill in the Server password</p>\n<p>Keep an eye on the server terminal window for any errors and to see who cannot join and why.</p>\n<p><img src=\"img/terraria/server-debug-min.png\"></p>\n<p>If all goes well you’ll be in the game and your friends can join.</p>\n<p><img src=\"img/terraria/play-min.png\"></p>\n<p>Have fun!!!</p>\n",
            "tags": [
                "Azure"
            ]
        }
    ]
}